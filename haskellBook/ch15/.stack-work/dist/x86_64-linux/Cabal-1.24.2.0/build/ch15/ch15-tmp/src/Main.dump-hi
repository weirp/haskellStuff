
==================== FINAL INTERFACE ====================
2017-03-13 01:03:53.5665 UTC

interface main@main:Main 8002
  interface hash: eeed01627795c6c93068115d6b15f1e7
  ABI hash: dee6478aa8be29c8c1c45b6c63080617
  export-list hash: f510e0bedcc57ede27d21bb5b873f5fb
  orphan hash: 8d17155b323303ad55cd613f0feb579a
  flag hash: b94adc30f072901c98d082bf915f152c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.aTree
  Main.arbitraryBool
  Main.arbitraryList
  Main.arbitrarySizedTree
  Main.dice
  Main.edges
  Main.main
  Main.nodes
  Main.prop_OneMoreNodeThanEdges
  Main.prop_ReverseReverseId
  Main.qcBoolConj
  Main.qcBoolDisj
  Main.qcSemiFourStrStrStrStr
  Main.qcSemiIdentityString
  Main.qcSemiOrStrStr
  Main.qcSemiThreeStrStrStr
  Main.qcSemiTwoStringString
  Main.reverse'
  Main.semigroupAssoc
  Main.BoolConj{Main.BoolConj}
  Main.BoolConjAssoc
  Main.BoolDisj{Main.BoolDisj}
  Main.BoolDisjAssoc
  Main.Combine{Main.Combine unCombine}
  Main.Four{Main.Four}
  Main.FourStrStrStrStrAssoc
  Main.Identity{Main.Identity}
  Main.IdentityStringAssoc
  Main.Or{Main.Fst Main.Snd}
  Main.OrAssocStrStr
  Main.Three{Main.Three}
  Main.ThreeStrStrStrAssoc
  Main.Tree{Main.Tree}
  Main.Trivial{Main.Trivial}
  Main.TrivialAssoc
  Main.Two{Main.Two}
  Main.TwoStringStringAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck 5d7cb5b36e5406469ab226c41cc67877
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Arbitrary 23d5e13e5df273f2d4aff38bd8911bef
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Gen fa9fa30ba543355933bd6081ce57f80f
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Test b10469d3ca677e9f6167afd5fc110985
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
4fe41344168b2a830b5f6573dc0137ca
  $fArbitraryBoolConj ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolConj
                  Main.$fArbitraryBoolConj_$carbitrary
                  Main.$fArbitraryBoolConj_$cshrink -}
4fe41344168b2a830b5f6573dc0137ca
  $fArbitraryBoolConj_$carbitrary ::
    Test.QuickCheck.Gen.Gen Main.BoolConj
  {- Arity: 2, Strictness: <L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Test.QuickCheck.Arbitrary.$fArbitraryBool2
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolConj[0]))) -}
4fe41344168b2a830b5f6573dc0137ca
  $fArbitraryBoolConj_$cshrink :: Main.BoolConj -> [Main.BoolConj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Main.BoolConj) -> GHC.Types.[] @ Main.BoolConj) -}
7a7b9092229e5c514413fdc5edba8736
  $fArbitraryBoolDisj ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolDisj
                  Main.$fArbitraryBoolDisj_$carbitrary
                  Main.$fArbitraryBoolDisj_$cshrink -}
7a7b9092229e5c514413fdc5edba8736
  $fArbitraryBoolDisj_$carbitrary ::
    Test.QuickCheck.Gen.Gen Main.BoolDisj
  {- Arity: 2, Strictness: <L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Test.QuickCheck.Arbitrary.$fArbitraryBool2
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolDisj[0]))) -}
7a7b9092229e5c514413fdc5edba8736
  $fArbitraryBoolDisj_$cshrink :: Main.BoolDisj -> [Main.BoolDisj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Main.BoolDisj) -> GHC.Types.[] @ Main.BoolDisj) -}
225e186231a1c391d772b05da1829061
  $fArbitraryFour ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                      ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d).
                  @ (Main.Four a b c d)
                  (Main.$fArbitraryFour_$carbitrary
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3)
                  (Main.$fArbitraryFour_$cshrink
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3) -}
225e186231a1c391d772b05da1829061
  $fArbitraryFour1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case Main.$w$carbitrary
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Main.Four @ a @ b @ c @ d ww1 ww2 ww3 ww4 }) -}
225e186231a1c391d772b05da1829061
  $fArbitraryFour_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Gen.Gen (Main.Four a b c d)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryFour1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary d>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Four a b c d>_R)) -}
225e186231a1c391d772b05da1829061
  $fArbitraryFour_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Main.Four a b c d -> [Main.Four a b c d]
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (ds1 :: Main.Four a b c d) ->
                 GHC.Types.[] @ (Main.Four a b c d)) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.Identity a)
                  (Main.$fArbitraryIdentity_$carbitrary @ a $dArbitrary)
                  (Main.$fArbitraryIdentity_$cshrink @ a $dArbitrary) -}
05dcbdc635d086a9b5c41536cd07b38f
  $fArbitraryIdentity1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                   eta
                   eta1) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fArbitraryIdentity_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Main.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Main.N:Identity[0] <a>_R))) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Main.Identity a -> [Main.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Main.Identity a) ->
                 GHC.Types.[] @ (Main.Identity a)) -}
b4e43208111cf5029ca22d7052a31b87
  $fArbitraryOr ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,1*U(1*U,A)><L,1*U(1*U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Main.Or a b)
                  (Main.$fArbitraryOr_$carbitrary @ a @ b $dArbitrary $dArbitrary1)
                  (Main.$fArbitraryOr_$cshrink @ a @ b $dArbitrary $dArbitrary1) -}
b4e43208111cf5029ca22d7052a31b87
  $fArbitraryOr_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Main.Or a b)
  {- Arity: 2, Strictness: <L,1*U(1*U,A)><L,1*U(1*U,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b) ->
                 Test.QuickCheck.Gen.oneof
                   @ (Main.Or a b)
                   (GHC.Types.:
                      @ (Test.QuickCheck.Gen.Gen (Main.Or a b))
                      (let {
                         ds :: Test.QuickCheck.Gen.Gen a
                         = Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary
                       } in
                       (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                        Main.Fst
                          @ a
                          @ b
                          (ds `cast` (Test.QuickCheck.Gen.N:Gen[0] <a>_R) r n))
                         `cast`
                       (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Or a b>_R)))
                      (GHC.Types.:
                         @ (Test.QuickCheck.Gen.Gen (Main.Or a b))
                         (let {
                            ds :: Test.QuickCheck.Gen.Gen b
                            = Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1
                          } in
                          (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                           Main.Snd
                             @ a
                             @ b
                             (ds `cast` (Test.QuickCheck.Gen.N:Gen[0] <b>_R) r n))
                            `cast`
                          (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Or a b>_R)))
                         (GHC.Types.[] @ (Test.QuickCheck.Gen.Gen (Main.Or a b)))))) -}
b4e43208111cf5029ca22d7052a31b87
  $fArbitraryOr_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Main.Or a b -> [Main.Or a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Main.Or a b) ->
                 GHC.Types.[] @ (Main.Or a b)) -}
381adeedbfedb0a12f57743ae522bde4
  $fArbitraryThree ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c).
                  @ (Main.Three a b c)
                  (Main.$fArbitraryThree_$carbitrary
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2)
                  (Main.$fArbitraryThree_$cshrink
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2) -}
381adeedbfedb0a12f57743ae522bde4
  $fArbitraryThree1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case Main.$w$carbitrary1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 Main.Three @ a @ b @ c ww1 ww2 ww3 }) -}
381adeedbfedb0a12f57743ae522bde4
  $fArbitraryThree_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Gen.Gen (Main.Three a b c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryThree1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Three a b c>_R)) -}
381adeedbfedb0a12f57743ae522bde4
  $fArbitraryThree_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Main.Three a b c -> [Main.Three a b c]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   @ c
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (ds1 :: Main.Three a b c) ->
                 GHC.Types.[] @ (Main.Three a b c)) -}
9e57f76befe88060c9f9e47f1cc77037
  $fArbitraryTree ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.Tree a)
                  (Main.$fArbitraryTree_$carbitrary @ a $dArbitrary)
                  (Main.$fArbitraryTree_$cshrink @ a $dArbitrary) -}
9e57f76befe88060c9f9e47f1cc77037
  $fArbitraryTree1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Tree a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Main.$fArbitraryTree2 @ a $dArbitrary eta1 eta eta1) -}
9e57f76befe88060c9f9e47f1cc77037
  $fArbitraryTree2 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Types.Int
    -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Tree a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case Main.$warbitrarySizedTree
                        @ a
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 Main.Tree @ a ww1 ww2 }) -}
9e57f76befe88060c9f9e47f1cc77037
  $fArbitraryTree_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Main.Tree a)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryTree1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Tree a>_R)) -}
9e57f76befe88060c9f9e47f1cc77037
  $fArbitraryTree_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Main.Tree a -> [Main.Tree a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Main.Tree a) ->
                 GHC.Types.[] @ (Main.Tree a)) -}
d965e95d7f394330121599371a5e4fb4
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fArbitraryTrivial_$carbitrary
                  Main.$fArbitraryTrivial_$cshrink -}
d965e95d7f394330121599371a5e4fb4
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Main.Trivial) -}
d965e95d7f394330121599371a5e4fb4
  $fArbitraryTrivial_$carbitrary ::
    Test.QuickCheck.Gen.Gen Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R)) -}
d965e95d7f394330121599371a5e4fb4
  $fArbitraryTrivial_$cshrink :: Main.Trivial -> [Main.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Main.Trivial) -> GHC.Types.[] @ Main.Trivial) -}
4e7291b182f3a4793d903e1c8224f75f
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Main.Two a b)
                  (Main.$fArbitraryTwo_$carbitrary @ a @ b $dArbitrary $dArbitrary1)
                  (Main.$fArbitraryTwo_$cshrink @ a @ b $dArbitrary $dArbitrary1) -}
4e7291b182f3a4793d903e1c8224f75f
  $fArbitraryTwo1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case Main.$w$carbitrary2
                        @ a
                        @ b
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 Main.Two @ a @ b ww1 ww2 }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fArbitraryTwo_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Main.Two a b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryTwo1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Two a b>_R)) -}
4e7291b182f3a4793d903e1c8224f75f
  $fArbitraryTwo_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Main.Two a b -> [Main.Two a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Main.Two a b) ->
                 GHC.Types.[] @ (Main.Two a b)) -}
4fe41344168b2a830b5f6573dc0137ca
  $fEqBoolConj :: GHC.Classes.Eq Main.BoolConj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolConj Main.$fEqBoolConj_$c== Main.$fEqBoolConj_$c/= -}
4fe41344168b2a830b5f6573dc0137ca
  $fEqBoolConj_$c/= ::
    Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (Main.N:BoolConj[0])
                 ->_R Sym (Main.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
4fe41344168b2a830b5f6573dc0137ca
  $fEqBoolConj_$c== ::
    Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (Main.N:BoolConj[0])
                 ->_R Sym (Main.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
7a7b9092229e5c514413fdc5edba8736
  $fEqBoolDisj :: GHC.Classes.Eq Main.BoolDisj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolDisj Main.$fEqBoolDisj_$c== Main.$fEqBoolDisj_$c/= -}
7a7b9092229e5c514413fdc5edba8736
  $fEqBoolDisj_$c/= ::
    Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (Main.N:BoolDisj[0])
                 ->_R Sym (Main.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
7a7b9092229e5c514413fdc5edba8736
  $fEqBoolDisj_$c== ::
    Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (Main.N:BoolDisj[0])
                 ->_R Sym (Main.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
225e186231a1c391d772b05da1829061
  $fEqFour ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Main.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dEq :: GHC.Classes.Eq d)
                      ($dEq1 :: GHC.Classes.Eq c)
                      ($dEq2 :: GHC.Classes.Eq b)
                      ($dEq3 :: GHC.Classes.Eq a).
                  @ (Main.Four a b c d)
                  (Main.$fEqFour_$c== @ a @ b @ c @ d $dEq $dEq1 $dEq2 $dEq3)
                  (Main.$fEqFour_$c/= @ a @ b @ c @ d $dEq $dEq1 $dEq2 $dEq3) -}
225e186231a1c391d772b05da1829061
  $fEqFour_$c/= ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Main.Four a b c d -> Main.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: GHC.Classes.Eq d)
                   ($dEq1 :: GHC.Classes.Eq c)
                   ($dEq2 :: GHC.Classes.Eq b)
                   ($dEq3 :: GHC.Classes.Eq a)
                   (a1 :: Main.Four a b c d)
                   (b1 :: Main.Four a b c d) ->
                 case Main.$fEqFour_$c==
                        @ a
                        @ b
                        @ c
                        @ d
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
225e186231a1c391d772b05da1829061
  $fEqFour_$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Main.Four a b c d -> Main.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (w4 :: Main.Four a b c d)
                   (w5 :: Main.Four a b c d) ->
                 case w4 of ww { Main.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { Main.Four ww6 ww7 ww8 ww9 ->
                 Main.$w$c==
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Main.Identity a)
                  (Main.$fEqIdentity_$c== @ a $dEq)
                  (Main.$fEqIdentity_$c/= @ a $dEq) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    Main.Identity a -> Main.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Main.N:Identity[0] <a>_R)
                 ->_R Sym (Main.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    Main.Identity a -> Main.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Main.N:Identity[0] <a>_R)
                 ->_R Sym (Main.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
b4e43208111cf5029ca22d7052a31b87
  $fEqOr ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Main.Or a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Main.Or a b)
                  (Main.$fEqOr_$c== @ a @ b $dEq $dEq1)
                  (Main.$fEqOr_$c/= @ a @ b $dEq $dEq1) -}
b4e43208111cf5029ca22d7052a31b87
  $fEqOr_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Or a b -> Main.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Main.Or a b)
                   (b1 :: Main.Or a b) ->
                 case a1 of wild {
                   Main.Fst a2
                   -> case b1 of wild1 {
                        Main.Fst b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Main.Snd ipv -> GHC.Types.True }
                   Main.Snd a2
                   -> case b1 of wild1 {
                        Main.Fst ipv -> GHC.Types.True
                        Main.Snd b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
b4e43208111cf5029ca22d7052a31b87
  $fEqOr_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Or a b -> Main.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Main.Or a b)
                   (ds1 :: Main.Or a b) ->
                 case ds of wild {
                   Main.Fst a1
                   -> case ds1 of wild1 {
                        Main.Fst b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Main.Snd ipv -> GHC.Types.False }
                   Main.Snd a1
                   -> case ds1 of wild1 {
                        Main.Fst ipv -> GHC.Types.False
                        Main.Snd b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
381adeedbfedb0a12f57743ae522bde4
  $fEqThree ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Main.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dEq :: GHC.Classes.Eq c)
                      ($dEq1 :: GHC.Classes.Eq b)
                      ($dEq2 :: GHC.Classes.Eq a).
                  @ (Main.Three a b c)
                  (Main.$fEqThree_$c== @ a @ b @ c $dEq $dEq1 $dEq2)
                  (Main.$fEqThree_$c/= @ a @ b @ c $dEq $dEq1 $dEq2) -}
381adeedbfedb0a12f57743ae522bde4
  $fEqThree_$c/= ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Three a b c -> Main.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dEq :: GHC.Classes.Eq c)
                   ($dEq1 :: GHC.Classes.Eq b)
                   ($dEq2 :: GHC.Classes.Eq a)
                   (a1 :: Main.Three a b c)
                   (b1 :: Main.Three a b c) ->
                 case Main.$fEqThree_$c==
                        @ a
                        @ b
                        @ c
                        $dEq
                        $dEq1
                        $dEq2
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
381adeedbfedb0a12f57743ae522bde4
  $fEqThree_$c== ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Three a b c -> Main.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (w3 :: Main.Three a b c)
                   (w4 :: Main.Three a b c) ->
                 case w3 of ww { Main.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Main.Three ww5 ww6 ww7 ->
                 Main.$w$c==1 @ a @ b @ c w w1 w2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
d965e95d7f394330121599371a5e4fb4
  $fEqTrivial :: GHC.Classes.Eq Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial Main.$fEqTrivial_$c== Main.$fEqTrivial_$c/= -}
d965e95d7f394330121599371a5e4fb4
  $fEqTrivial_$c/= :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Trivial) (b :: Main.Trivial) ->
                 case a of wild { Main.Trivial ->
                 case b of wild1 { Main.Trivial -> GHC.Types.False } }) -}
d965e95d7f394330121599371a5e4fb4
  $fEqTrivial_$c== :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) ->
                 case ds of wild { Main.Trivial ->
                 case ds1 of wild1 { Main.Trivial -> GHC.Types.True } }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fEqTwo ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Main.Two a b)
                  (Main.$fEqTwo_$c== @ a @ b $dEq $dEq1)
                  (Main.$fEqTwo_$c/= @ a @ b $dEq $dEq1) -}
4e7291b182f3a4793d903e1c8224f75f
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Main.Two a b)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { Main.Two ww1 ww2 ->
                 case w3 of ww3 { Main.Two ww4 ww5 ->
                 Main.$w$c/= @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fEqTwo_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Main.Two a b)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { Main.Two ww1 ww2 ->
                 case w3 of ww3 { Main.Two ww4 ww5 ->
                 Main.$w$c==2 @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
4fe41344168b2a830b5f6573dc0137ca
  $fSemigroupBoolConj :: Data.Semigroup.Semigroup Main.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolConj
                  Main.$fSemigroupBoolConj_$c<>
                  Main.$fSemigroupBoolConj_$csconcat
                  Main.$fSemigroupBoolConj_$cstimes -}
4fe41344168b2a830b5f6573dc0137ca
  $fSemigroupBoolConj_$c<> ::
    Main.BoolConj -> Main.BoolConj -> Main.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.&&
                  `cast`
                (Sym (Main.N:BoolConj[0])
                 ->_R Sym (Main.N:BoolConj[0])
                 ->_R Sym (Main.N:BoolConj[0])) -}
4fe41344168b2a830b5f6573dc0137ca
  $fSemigroupBoolConj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Main.BoolConj -> Main.BoolConj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty Main.BoolConj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Main.$fSemigroupBoolConj_go ww1 ww2 }) -}
4fe41344168b2a830b5f6573dc0137ca
  $fSemigroupBoolConj_$cstimes ::
    GHC.Real.Integral b => b -> Main.BoolConj -> Main.BoolConj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
4fe41344168b2a830b5f6573dc0137ca
  $fSemigroupBoolConj_go ::
    Main.BoolConj -> [Main.BoolConj] -> Main.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7a7b9092229e5c514413fdc5edba8736
  $fSemigroupBoolDisj :: Data.Semigroup.Semigroup Main.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolDisj
                  Main.$fSemigroupBoolDisj_$c<>
                  Main.$fSemigroupBoolDisj_$csconcat
                  Main.$fSemigroupBoolDisj_$cstimes -}
7a7b9092229e5c514413fdc5edba8736
  $fSemigroupBoolDisj_$c<> ::
    Main.BoolDisj -> Main.BoolDisj -> Main.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.||
                  `cast`
                (Sym (Main.N:BoolDisj[0])
                 ->_R Sym (Main.N:BoolDisj[0])
                 ->_R Sym (Main.N:BoolDisj[0])) -}
7a7b9092229e5c514413fdc5edba8736
  $fSemigroupBoolDisj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Main.BoolDisj -> Main.BoolDisj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty Main.BoolDisj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Main.$fSemigroupBoolDisj_go ww1 ww2 }) -}
7a7b9092229e5c514413fdc5edba8736
  $fSemigroupBoolDisj_$cstimes ::
    GHC.Real.Integral b => b -> Main.BoolDisj -> Main.BoolDisj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
7a7b9092229e5c514413fdc5edba8736
  $fSemigroupBoolDisj_go ::
    Main.BoolDisj -> [Main.BoolDisj] -> Main.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
225e186231a1c391d772b05da1829061
  $fSemigroupFour ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.Semigroup.Semigroup (Main.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c)
                      ($dSemigroup3 :: Data.Semigroup.Semigroup d).
                  @ (Main.Four a b c d)
                  (Main.$fSemigroupFour_$c<>
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (Main.$fSemigroupFour_$csconcat
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (Main.$fSemigroupFour_$cstimes
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3) -}
225e186231a1c391d772b05da1829061
  $fSemigroupFour_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Main.Four a b c d -> Main.Four a b c d -> Main.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Main.Four a b c d)
                   (w5 :: Main.Four a b c d) ->
                 case w4 of ww { Main.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { Main.Four ww6 ww7 ww8 ww9 ->
                 Main.Four
                   @ a
                   @ b
                   @ c
                   @ d
                   (Data.Semigroup.<> @ a w ww1 ww6)
                   (Data.Semigroup.<> @ b w1 ww2 ww7)
                   (Data.Semigroup.<> @ c w2 ww3 ww8)
                   (Data.Semigroup.<> @ d w3 ww4 ww9) } }) -}
225e186231a1c391d772b05da1829061
  $fSemigroupFour_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.List.NonEmpty.NonEmpty (Main.Four a b c d)
    -> Main.Four a b c d
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Data.List.NonEmpty.NonEmpty (Main.Four a b c d)) ->
                 case w4 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Main.Four ww4 ww5 ww6 ww7 ->
                 case Main.$w$csconcat
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww2 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 ->
                 Main.Four @ a @ b @ c @ d ww9 ww10 ww11 ww12 } } }) -}
225e186231a1c391d772b05da1829061
  $fSemigroupFour_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Main.Four a b c d -> Main.Four a b c d
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   @ b1
                   (w4 :: GHC.Real.Integral b1)
                   (w5 :: b1)
                   (w6 :: Main.Four a b c d) ->
                 case w6 of ww { Main.Four ww1 ww2 ww3 ww4 ->
                 case Main.$w$cstimes
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        @ b1
                        w4
                        w5
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Main.Four @ a @ b @ c @ d ww6 ww7 ww8 ww9 } }) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Main.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Main.Identity a)
                  (Main.$fSemigroupIdentity_$c<> @ a $dSemigroup)
                  (Main.$fSemigroupIdentity_$csconcat @ a $dSemigroup)
                  (Main.$fSemigroupIdentity_$cstimes @ a $dSemigroup) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fSemigroupIdentity1 ::
    Data.Semigroup.Semigroup a =>
    Main.Identity a -> Main.Identity a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Main.Identity a)
                   (ds1 :: Main.Identity a) ->
                 Data.Semigroup.<>
                   @ a
                   $dSemigroup
                   ds `cast` (Main.N:Identity[0] <a>_R)
                   ds1 `cast` (Main.N:Identity[0] <a>_R)) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fSemigroupIdentity_$c<> ::
    Data.Semigroup.Semigroup a =>
    Main.Identity a -> Main.Identity a -> Main.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fSemigroupIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <Main.Identity a>_R
                 ->_R <Main.Identity a>_R
                 ->_R Sym (Main.N:Identity[0] <a>_R)) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fSemigroupIdentity_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Main.Identity a) -> Main.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Main.Identity a)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Main.$w$csconcat1 @ a w ww1 ww2 }) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fSemigroupIdentity_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> Main.Identity a -> Main.Identity a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
b4e43208111cf5029ca22d7052a31b87
  $fSemigroupOr :: Data.Semigroup.Semigroup (Main.Or a b)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Main.Or a b)
                  (Main.$fSemigroupOr_$c<> @ a @ b)
                  (Main.$fSemigroupOr_$csconcat @ a @ b)
                  (Main.$fSemigroupOr_$cstimes @ a @ b) -}
b4e43208111cf5029ca22d7052a31b87
  $fSemigroupOr1 :: Main.Or a b -> [Main.Or a b] -> Main.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b4e43208111cf5029ca22d7052a31b87
  $fSemigroupOr_$c<> :: Main.Or a b -> Main.Or a b -> Main.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: Main.Or a b) (ds1 :: Main.Or a b) ->
                 case ds of wild {
                   Main.Fst ipv -> ds1 Main.Snd x -> Main.Snd @ a @ b x }) -}
b4e43208111cf5029ca22d7052a31b87
  $fSemigroupOr_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Main.Or a b) -> Main.Or a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (w :: Data.List.NonEmpty.NonEmpty (Main.Or a b)) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Main.$fSemigroupOr1 @ a @ b ww1 ww2 }) -}
b4e43208111cf5029ca22d7052a31b87
  $fSemigroupOr_$cstimes ::
    GHC.Real.Integral b1 => b1 -> Main.Or a b -> Main.Or a b
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
381adeedbfedb0a12f57743ae522bde4
  $fSemigroupThree ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.Semigroup.Semigroup (Main.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c).
                  @ (Main.Three a b c)
                  (Main.$fSemigroupThree_$c<>
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (Main.$fSemigroupThree_$csconcat
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (Main.$fSemigroupThree_$cstimes
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2) -}
381adeedbfedb0a12f57743ae522bde4
  $fSemigroupThree_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Main.Three a b c -> Main.Three a b c -> Main.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Main.Three a b c)
                   (w4 :: Main.Three a b c) ->
                 case w3 of ww { Main.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Main.Three ww5 ww6 ww7 ->
                 Main.Three
                   @ a
                   @ b
                   @ c
                   (Data.Semigroup.<> @ a w ww1 ww5)
                   (Data.Semigroup.<> @ b w1 ww2 ww6)
                   (Data.Semigroup.<> @ c w2 ww3 ww7) } }) -}
381adeedbfedb0a12f57743ae522bde4
  $fSemigroupThree_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.List.NonEmpty.NonEmpty (Main.Three a b c) -> Main.Three a b c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.List.NonEmpty.NonEmpty (Main.Three a b c)) ->
                 case w3 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Main.Three ww4 ww5 ww6 ->
                 case Main.$w$csconcat2
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww4
                        ww5
                        ww6
                        ww2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 Main.Three @ a @ b @ c ww8 ww9 ww10 } } }) -}
381adeedbfedb0a12f57743ae522bde4
  $fSemigroupThree_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Main.Three a b c -> Main.Three a b c
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   @ b1
                   (w3 :: GHC.Real.Integral b1)
                   (w4 :: b1)
                   (w5 :: Main.Three a b c) ->
                 case w5 of ww { Main.Three ww1 ww2 ww3 ->
                 case Main.$w$cstimes1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        @ b1
                        w3
                        w4
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Main.Three @ a @ b @ c ww5 ww6 ww7 } }) -}
d965e95d7f394330121599371a5e4fb4
  $fSemigroupTrivial :: Data.Semigroup.Semigroup Main.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fSemigroupTrivial_$c<>
                  Main.$fSemigroupTrivial_$csconcat
                  Main.$fSemigroupTrivial_$cstimes -}
d965e95d7f394330121599371a5e4fb4
  $fSemigroupTrivial_$c<> ::
    Main.Trivial -> Main.Trivial -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) -> Main.Trivial) -}
d965e95d7f394330121599371a5e4fb4
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty Main.Trivial -> Main.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Main.Trivial) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Main.Trivial } }) -}
d965e95d7f394330121599371a5e4fb4
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Main.Trivial -> Main.Trivial
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U()> -}
4e7291b182f3a4793d903e1c8224f75f
  $fSemigroupTwo ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Main.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (Main.Two a b)
                  (Main.$fSemigroupTwo_$c<> @ a @ b $dSemigroup $dSemigroup1)
                  (Main.$fSemigroupTwo_$csconcat @ a @ b $dSemigroup $dSemigroup1)
                  (Main.$fSemigroupTwo_$cstimes @ a @ b $dSemigroup $dSemigroup1) -}
4e7291b182f3a4793d903e1c8224f75f
  $fSemigroupTwo_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Main.Two a b -> Main.Two a b -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: Main.Two a b)
                   (ds1 :: Main.Two a b) ->
                 case ds of wild { Main.Two a1 b1 ->
                 case ds1 of wild1 { Main.Two a' b' ->
                 Main.Two
                   @ a
                   @ b
                   (Data.Semigroup.<> @ a $dSemigroup a1 a')
                   (Data.Semigroup.<> @ b $dSemigroup1 b1 b') } }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fSemigroupTwo_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Main.Two a b) -> Main.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (Main.Two a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Main.Two ww4 ww5 ->
                 case Main.$w$csconcat3
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 Main.Two @ a @ b ww7 ww8 } } }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fSemigroupTwo_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Main.Two a b -> Main.Two a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   @ b1
                   (w2 :: GHC.Real.Integral b1)
                   (w3 :: b1)
                   (w4 :: Main.Two a b) ->
                 case w4 of ww { Main.Two ww1 ww2 ->
                 case Main.$w$cstimes2
                        @ a
                        @ b
                        w
                        w1
                        @ b1
                        w2
                        w3
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Main.Two @ a @ b ww4 ww5 } }) -}
4fe41344168b2a830b5f6573dc0137ca
  $fShowBoolConj :: GHC.Show.Show Main.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolConj
                  Main.$fShowBoolConj_$cshowsPrec
                  Main.$fShowBoolConj_$cshow
                  Main.$fShowBoolConj_$cshowList -}
4fe41344168b2a830b5f6573dc0137ca
  $fShowBoolConj1 :: Main.BoolConj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.BoolConj) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
d627c990c1815dc72ab7357199972312
  $fShowBoolConj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolConj "#) -}
4fe41344168b2a830b5f6573dc0137ca
  $fShowBoolConj_$cshow :: Main.BoolConj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.BoolConj) ->
                 Main.$fShowBoolConj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4fe41344168b2a830b5f6573dc0137ca
  $fShowBoolConj_$cshowList :: [Main.BoolConj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.BoolConj
                   Main.$fShowBoolConj1) -}
4fe41344168b2a830b5f6573dc0137ca
  $fShowBoolConj_$cshowsPrec ::
    GHC.Types.Int -> Main.BoolConj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.BoolConj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
7a7b9092229e5c514413fdc5edba8736
  $fShowBoolDisj :: GHC.Show.Show Main.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolDisj
                  Main.$fShowBoolDisj_$cshowsPrec
                  Main.$fShowBoolDisj_$cshow
                  Main.$fShowBoolDisj_$cshowList -}
7a7b9092229e5c514413fdc5edba8736
  $fShowBoolDisj1 :: Main.BoolDisj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.BoolDisj) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec1 0# w w1) -}
7a99d6b32d457c5de9a8d88ed88ce323
  $fShowBoolDisj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolDisj "#) -}
7a7b9092229e5c514413fdc5edba8736
  $fShowBoolDisj_$cshow :: Main.BoolDisj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.BoolDisj) ->
                 Main.$fShowBoolDisj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7a7b9092229e5c514413fdc5edba8736
  $fShowBoolDisj_$cshowList :: [Main.BoolDisj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.BoolDisj
                   Main.$fShowBoolDisj1) -}
7a7b9092229e5c514413fdc5edba8736
  $fShowBoolDisj_$cshowsPrec ::
    GHC.Types.Int -> Main.BoolDisj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.BoolDisj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 ww1 w1 w2 }) -}
225e186231a1c391d772b05da1829061
  $fShowFour ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Show.Show (Main.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dShow :: GHC.Show.Show d)
                      ($dShow1 :: GHC.Show.Show c)
                      ($dShow2 :: GHC.Show.Show b)
                      ($dShow3 :: GHC.Show.Show a).
                  @ (Main.Four a b c d)
                  (Main.$fShowFour_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3)
                  (Main.$fShowFour_$cshow
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3)
                  (Main.$fShowFour_$cshowList
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3) -}
9e4f724248c1c1f7266d390deb58d448
  $fShowFour1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3f377837c4406a5d65f0b4666176cbf9
  $fShowFour2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Four "#) -}
fb619ce5ee4c9d627800746a4e95c49f
  $fShowFour3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
225e186231a1c391d772b05da1829061
  $fShowFour_$cshow ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    Main.Four a b c d -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow :: GHC.Show.Show d)
                   ($dShow1 :: GHC.Show.Show c)
                   ($dShow2 :: GHC.Show.Show b)
                   ($dShow3 :: GHC.Show.Show a)
                   (x :: Main.Four a b c d) ->
                 Main.$fShowFour_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
225e186231a1c391d772b05da1829061
  $fShowFour_$cshowList ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    [Main.Four a b c d] -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow :: GHC.Show.Show d)
                   ($dShow1 :: GHC.Show.Show c)
                   ($dShow2 :: GHC.Show.Show b)
                   ($dShow3 :: GHC.Show.Show a)
                   (eta :: [Main.Four a b c d])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Four a b c d)
                   (Main.$fShowFour_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      @ d
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      Main.$fShowFour1)
                   eta
                   eta1) -}
225e186231a1c391d772b05da1829061
  $fShowFour_$cshowsPrec ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Types.Int -> Main.Four a b c d -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (w4 :: GHC.Types.Int)
                   (w5 :: Main.Four a b c d) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Main.Four ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec2
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Main.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Main.Identity a)
                  (Main.$fShowIdentity_$cshowsPrec @ a $dShow)
                  (Main.$fShowIdentity_$cshow @ a $dShow)
                  (Main.$fShowIdentity_$cshowList @ a $dShow) -}
9a1df3dc3e86745f67eccd0ae5850ead
  $fShowIdentity1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Main.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowIdentity1)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Main.$fShowFour3
                      x `cast` (Main.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Main.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Identity a)
                   (Main.$fShowIdentity_$cshowsPrec @ a $dShow Main.$fShowFour1)
                   eta
                   eta1) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec3 @ a w ww1 w2 }) -}
b4e43208111cf5029ca22d7052a31b87
  $fShowOr ::
    (GHC.Show.Show b, GHC.Show.Show a) => GHC.Show.Show (Main.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Main.Or a b)
                  (Main.$fShowOr_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Main.$fShowOr_$cshow @ a @ b $dShow $dShow1)
                  (Main.$fShowOr_$cshowList @ a @ b $dShow $dShow1) -}
15f9bbdbb569b40ff7dd4f2ca7c28ef7
  $fShowOr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Snd "#) -}
5e391d34b9de5306b490d5ac1987fcf7
  $fShowOr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fst "#) -}
b4e43208111cf5029ca22d7052a31b87
  $fShowOr_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Main.Or a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Main.Or a b) ->
                 case x of wild {
                   Main.Fst b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowOr2
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Main.$fShowFour3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Main.Snd b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowOr1
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Main.$fShowFour3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
b4e43208111cf5029ca22d7052a31b87
  $fShowOr_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Main.Or a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Main.Or a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Or a b)
                   (Main.$fShowOr_$cshowsPrec @ a @ b $dShow $dShow1 Main.$fShowFour1)
                   eta
                   eta1) -}
b4e43208111cf5029ca22d7052a31b87
  $fShowOr_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Main.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Main.Or a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec4 @ a @ b w w1 ww1 w3 }) -}
381adeedbfedb0a12f57743ae522bde4
  $fShowThree ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Main.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dShow :: GHC.Show.Show c)
                      ($dShow1 :: GHC.Show.Show b)
                      ($dShow2 :: GHC.Show.Show a).
                  @ (Main.Three a b c)
                  (Main.$fShowThree_$cshowsPrec @ a @ b @ c $dShow $dShow1 $dShow2)
                  (Main.$fShowThree_$cshow @ a @ b @ c $dShow $dShow1 $dShow2)
                  (Main.$fShowThree_$cshowList @ a @ b @ c $dShow $dShow1 $dShow2) -}
6c27f80a8ecc2903fa347cc6327aae5f
  $fShowThree1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Three "#) -}
381adeedbfedb0a12f57743ae522bde4
  $fShowThree_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    Main.Three a b c -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show a)
                   (x :: Main.Three a b c) ->
                 Main.$fShowThree_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   $dShow
                   $dShow1
                   $dShow2
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
381adeedbfedb0a12f57743ae522bde4
  $fShowThree_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    [Main.Three a b c] -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show a)
                   (eta :: [Main.Three a b c])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Three a b c)
                   (Main.$fShowThree_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      $dShow
                      $dShow1
                      $dShow2
                      Main.$fShowFour1)
                   eta
                   eta1) -}
381adeedbfedb0a12f57743ae522bde4
  $fShowThree_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Main.Three a b c -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (w3 :: GHC.Types.Int)
                   (w4 :: Main.Three a b c) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Main.Three ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec5 @ a @ b @ c w w1 w2 ww1 ww3 ww4 ww5 } }) -}
9e57f76befe88060c9f9e47f1cc77037
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Main.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Main.Tree a)
                  (Main.$fShowTree_$cshowsPrec @ a $dShow)
                  (Main.$fShowTree_$cshow @ a $dShow)
                  (Main.$fShowTree_$cshowList @ a $dShow) -}
9e57f76befe88060c9f9e47f1cc77037
  $fShowTree_$cshow ::
    GHC.Show.Show a => Main.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Tree a) ->
                 Main.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9e57f76befe88060c9f9e47f1cc77037
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Main.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.Tree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Tree a)
                   (Main.$fShowTree_$cshowsPrec @ a $dShow Main.$fShowFour1)
                   eta
                   eta1) -}
9e57f76befe88060c9f9e47f1cc77037
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.Tree a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Tree a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Main.Tree ww3 ww4 ->
                 Main.$w$cshowsPrec6 @ a w ww1 ww3 ww4 } }) -}
d965e95d7f394330121599371a5e4fb4
  $fShowTrivial :: GHC.Show.Show Main.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fShowTrivial_$cshowsPrec
                  Main.$fShowTrivial_$cshow
                  Main.$fShowTrivial_$cshowList -}
d965e95d7f394330121599371a5e4fb4
  $fShowTrivial1 :: Main.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
130a9a5e4a6ebcef7c6093e1d77b9929
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
d965e95d7f394330121599371a5e4fb4
  $fShowTrivial_$cshow :: Main.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Trivial) ->
                 case x of wild { Main.Trivial -> Main.$fShowTrivial2 }) -}
d965e95d7f394330121599371a5e4fb4
  $fShowTrivial_$cshowList :: [Main.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Trivial
                   Main.$fShowTrivial1) -}
d965e95d7f394330121599371a5e4fb4
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Main.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
4e7291b182f3a4793d903e1c8224f75f
  $fShowTwo ::
    (GHC.Show.Show b, GHC.Show.Show a) => GHC.Show.Show (Main.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Main.Two a b)
                  (Main.$fShowTwo_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Main.$fShowTwo_$cshow @ a @ b $dShow $dShow1)
                  (Main.$fShowTwo_$cshowList @ a @ b $dShow $dShow1) -}
ad9dec1d77a6afa401d19d795d80f005
  $fShowTwo1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Two "#) -}
4e7291b182f3a4793d903e1c8224f75f
  $fShowTwo_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Main.Two a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Main.Two a b) ->
                 Main.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4e7291b182f3a4793d903e1c8224f75f
  $fShowTwo_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Main.Two a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Main.Two a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Two a b)
                   (Main.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Main.$fShowFour1)
                   eta
                   eta1) -}
4e7291b182f3a4793d903e1c8224f75f
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Main.Two a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Main.Two ww3 ww4 ->
                 Main.$w$cshowsPrec7 @ a @ b w w1 ww1 ww3 ww4 } }) -}
6df1ca850e59e5cc94fff854955ad02e
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  Main.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink -}
d807c522958cfb0fb046c959b72f51ad
  $s$fArbitrary[]_$s$fArbitrary[]_$cshrink ::
    [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   xs) -}
c784e43a87e8d4f127f0e4e804d1480f
  $tc'BoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9759706938257540711##
                   12447521963253847410##
                   Main.$trModule
                   Main.$tc'BoolConj1) -}
1ce348d652e72fa65287a0c2f97f2b79
  $tc'BoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolConj"#) -}
83cc3c3c5770ddafff68f45aaaba39b4
  $tc'BoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12652675933577583632##
                   17628715653650527776##
                   Main.$trModule
                   Main.$tc'BoolDisj1) -}
aa95d01e4c43c7f242eefb2bc98b39de
  $tc'BoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolDisj"#) -}
e35ca82575431bc28d51d7e005020c9e
  $tc'Combine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1950544944134395606##
                   2911781329909098878##
                   Main.$trModule
                   Main.$tc'Combine1) -}
8e35ab0d1ab2bd2bdfb68f5ba4ebb71b
  $tc'Combine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Combine"#) -}
ed3ecb76e1291472a53797724f3bdf5e
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8622785414851459792##
                   2336234101292850291##
                   Main.$trModule
                   Main.$tc'Four1) -}
b70a2cd032c5ef23fd8f8f959441ece3
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Four"#) -}
3bd01df171441ee986c267f82f5598ea
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9940562695922315467##
                   3034498016122410373##
                   Main.$trModule
                   Main.$tc'Fst1) -}
92ca7969e88ea5e498769dd7780e5f33
  $tc'Fst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fst"#) -}
fb6ed5929bece2c052127313cb24c106
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2029112138846393583##
                   2905385520651452197##
                   Main.$trModule
                   Main.$tc'Identity1) -}
d66c2f8db5a22ef38960484a4b9f37e2
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
af54adfe7c6dd4761da8a21827b3f2c2
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17662878918028070823##
                   4669493353677054090##
                   Main.$trModule
                   Main.$tc'Snd1) -}
6d4fa7ec7474ebe6c1af8e67dd597a03
  $tc'Snd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Snd"#) -}
be2764d2dc870ffdc73ae4cca42bf7f8
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12510237057949153623##
                   595796659182430204##
                   Main.$trModule
                   Main.$tc'Three1) -}
4024c0905512835ebdd8733ecbef0d94
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Three"#) -}
330d366ef041bc479118736836d95d18
  $tc'Tree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14711953711329665878##
                   17009449702030998521##
                   Main.$trModule
                   Main.$tc'Tree1) -}
27b06e577871fee547a8e1947aef0fea
  $tc'Tree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tree"#) -}
47a3bdf041526bc93d7c61295b9f3eff
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12373600294482878254##
                   17133399453771763490##
                   Main.$trModule
                   Main.$tc'Trivial1) -}
12ccf90ff33853ea192be952e85f3f3a
  $tc'Trivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Trivial"#) -}
443ea5796118bcb13ab22e8560b5c053
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11759581154375103227##
                   9826162150277277416##
                   Main.$trModule
                   Main.$tc'Two1) -}
f743e2887144c03f1329f0ea90849224
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Two"#) -}
c736225d6ce62a8856500cd9eb078385
  $tcBoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16367451401211899932##
                   13442242343125529767##
                   Main.$trModule
                   Main.$tcBoolConj1) -}
0b15682733d2a9df82642066d05b321f
  $tcBoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolConj"#) -}
fe7c24822525f62adfe1846feee0f704
  $tcBoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6108276362815135458##
                   6078942622117879337##
                   Main.$trModule
                   Main.$tcBoolDisj1) -}
1a3b03de979f6a681d739dadee48ef05
  $tcBoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolDisj"#) -}
b28e9bbb837999c96b26c7e43cdc9f21
  $tcCombine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6676691606236412552##
                   957410811335334868##
                   Main.$trModule
                   Main.$tcCombine1) -}
0282286c3f490a918232c640aacedbb2
  $tcCombine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Combine"#) -}
071f36deab0aa5139de4e2aa3b274875
  $tcFour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5628111129665016901##
                   6011033382785653334##
                   Main.$trModule
                   Main.$tcFour1) -}
4208086bc6fb02781be71289653b33bd
  $tcFour1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Four"#) -}
7f9137da72f6c5793b3d621bfaad5de1
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1219351100840430795##
                   4195889340468339127##
                   Main.$trModule
                   Main.$tcIdentity1) -}
8223c0a29bd099943619ea59d112c6ea
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
1c6d8f029fda27e924ec13802cbe20eb
  $tcOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1631687312833976904##
                   8172852671454622306##
                   Main.$trModule
                   Main.$tcOr1) -}
3c0670d62f57d3a0ff123770ca856110
  $tcOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Or"#) -}
14220b53f0df1af5747f191894ad4ed2
  $tcThree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17709309057917554660##
                   6451264480197805443##
                   Main.$trModule
                   Main.$tcThree1) -}
3908fe019a057c17e00cc20fef75e14f
  $tcThree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Three"#) -}
eb65309e444719620bb28719f183a311
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5221301707935523821##
                   5443990263623556092##
                   Main.$trModule
                   Main.$tcTree1) -}
141ad2548acd839d09f2168b36f91bb5
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
be3aefdfa088a130def86addf81b4a99
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12695646767575594229##
                   3034266354664355023##
                   Main.$trModule
                   Main.$tcTrivial1) -}
8994f33c389d8b42576823513969781e
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trivial"#) -}
4962246558c2eda902f834ffb2bce012
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1480394869616549274##
                   160745864207638302##
                   Main.$trModule
                   Main.$tcTwo1) -}
fe39380f386f2e0a360e40f81942dd82
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Two"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
cfe23c9ab6e6eb8fdf30719ad0d49cfc
  $w$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
4ff860726588f3d07d78d3577e269730
  $w$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    a -> b -> c -> d -> a -> b -> c -> d -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: a)
                   (ww5 :: b)
                   (ww6 :: c)
                   (ww7 :: d) ->
                 case GHC.Classes.== @ a w3 ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w2 ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.== @ c w1 ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ d w ww3 ww7 } } }) -}
a12532ba6836668ee576a3c364d55a74
  $w$c==1 ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> c -> a -> b -> c -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: a)
                   (ww4 :: b)
                   (ww5 :: c) ->
                 case GHC.Classes.== @ a w2 ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w1 ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ c w ww2 ww5 } }) -}
32c27f5754fb1d70189d26e41dde0520
  $w$c==2 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w ww1 ww3 }) -}
db8e742d3c7afe359ea1b5c81d83b698
  $w$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c, d #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w4
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   ds3 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds2 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds3 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ d w3)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <d>_R)
                      (case ds3 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w5 #)) -}
c24e57226f3d946a69a0b9e4b77f160a
  $w$carbitrary1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w3
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds2 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w4 #)) -}
52fce79800d0de1dc28137816215cd57
  $w$carbitrary2 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds1 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w3 #)) -}
225e186231a1c391d772b05da1829061
  $w$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    a -> b -> c -> d -> [Main.Four a b c d] -> (# a, b, c, d #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: [Main.Four a b c d]) ->
                 letrec {
                   $wgo6 :: a
                            -> b -> c -> d -> [Main.Four a b c d] -> (# a, b, c, d #)
                     {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww5 :: a)
                       (ww6 :: b)
                       (ww7 :: c)
                       (ww8 :: d)
                       (w4 :: [Main.Four a b c d]) ->
                     case w4 of wild1 {
                       [] -> (# ww5, ww6, ww7, ww8 #)
                       : c1 cs
                       -> case c1 of ww9 { Main.Four ww10 ww11 ww12 ww13 ->
                          case $wgo6
                                 ww10
                                 ww11
                                 ww12
                                 ww13
                                 cs of ww14 { (#,,,#) ww15 ww16 ww17 ww18 ->
                          (# Data.Semigroup.<> @ a w ww5 ww15,
                             Data.Semigroup.<> @ b w1 ww6 ww16,
                             Data.Semigroup.<> @ c w2 ww7 ww17,
                             Data.Semigroup.<> @ d w3 ww8 ww18 #) } } }
                 } in
                 $wgo6 ww ww1 ww2 ww3 ww4) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $w$csconcat1 ::
    Data.Semigroup.Semigroup a =>
    Main.Identity a -> [Main.Identity a] -> Main.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Main.Identity a)
                   (ww1 :: [Main.Identity a]) ->
                 letrec {
                   go7 :: Main.Identity a -> [Main.Identity a] -> Main.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: Main.Identity a) (ds1 :: [Main.Identity a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (Data.Semigroup.<>
                             @ a
                             w
                             b `cast` (Main.N:Identity[0] <a>_R)
                             (go7 c cs) `cast` (Main.N:Identity[0] <a>_R))
                            `cast`
                          (Sym (Main.N:Identity[0] <a>_R)) }
                 } in
                 go7 ww ww1) -}
381adeedbfedb0a12f57743ae522bde4
  $w$csconcat2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    a -> b -> c -> [Main.Three a b c] -> (# a, b, c #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: [Main.Three a b c]) ->
                 letrec {
                   $wgo6 :: a -> b -> c -> [Main.Three a b c] -> (# a, b, c #)
                     {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww4 :: a) (ww5 :: b) (ww6 :: c) (w3 :: [Main.Three a b c]) ->
                     case w3 of wild1 {
                       [] -> (# ww4, ww5, ww6 #)
                       : c1 cs
                       -> case c1 of ww7 { Main.Three ww8 ww9 ww10 ->
                          case $wgo6 ww8 ww9 ww10 cs of ww11 { (#,,#) ww12 ww13 ww14 ->
                          (# Data.Semigroup.<> @ a w ww4 ww12,
                             Data.Semigroup.<> @ b w1 ww5 ww13,
                             Data.Semigroup.<> @ c w2 ww6 ww14 #) } } }
                 } in
                 $wgo6 ww ww1 ww2 ww3) -}
4e7291b182f3a4793d903e1c8224f75f
  $w$csconcat3 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    a -> b -> [Main.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [Main.Two a b]) ->
                 letrec {
                   $wgo6 :: a -> b -> [Main.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [Main.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { Main.Two ww6 ww7 ->
                          case $wgo6 ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# Data.Semigroup.<> @ a w ww3 ww9,
                             Data.Semigroup.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo6 ww ww1 ww2) -}
4fe41344168b2a830b5f6573dc0137ca
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.BoolConj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.BoolConj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowBoolConj2
                       (case w `cast` (Main.N:BoolConj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
7a7b9092229e5c514413fdc5edba8736
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.BoolDisj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.BoolDisj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowBoolDisj2
                       (case w `cast` (Main.N:BoolDisj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
586a4de10efdf2d04b79dc4f66653507
  $w$cshowsPrec2 ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> d -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c)
                   (ww4 :: d) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w3 Main.$fShowFour3 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w2 Main.$fShowFour3 ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w1 Main.$fShowFour3 ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ d w Main.$fShowFour3 ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowFour2
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
dd9e7a2d5c1a662c36cb5fbc791c7375
  $w$cshowsPrec3 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Main.$fShowFour3
                       w1 `cast` (Main.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowIdentity1 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowIdentity1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
b4e43208111cf5029ca22d7052a31b87
  $w$cshowsPrec4 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Main.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Main.Or a b) ->
                 case w2 of wild {
                   Main.Fst b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Main.$fShowFour3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowOr2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowOr2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Main.Snd b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Main.$fShowFour3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowOr1 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowOr1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
5a016c9c08b0c93b89623ab8d720039b
  $w$cshowsPrec5 ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w2 Main.$fShowFour3 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w1 Main.$fShowFour3 ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w Main.$fShowFour3 ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowThree1
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
9e57f76befe88060c9f9e47f1cc77037
  $w$cshowsPrec6 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> a -> [Main.Tree a] -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(C(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0] -}
91ac5124fb6b27aeaf62e02a1cf8058c
  $w$cshowsPrec7 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 Main.$fShowFour3 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w Main.$fShowFour3 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowTwo1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowTwo1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
e8774af65eafdf823878f361bbe1b010
  $w$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> d -> (# a, b, c, d #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
f5e5965a70e322fe02ec18d2e6b453f2
  $w$cstimes1 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> (# a, b, c #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
1e0aece26989411086e62ed13a590116
  $w$cstimes2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1. GHC.Real.Integral b1 => b1 -> a -> b -> (# a, b #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U>,
     Inline: [0] -}
cf6b76d3be0cce3ae46c1f66daaf3c49
  $warbitraryBool :: Test.QuickCheck.Random.QCGen -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ Test.QuickCheck.Random.QCGen
                        @ GHC.Types.Int
                        Test.QuickCheck.Random.$fRandomGenQCGen
                        GHC.Num.$fNumInt
                        System.Random.getStdRandom4
                        System.Random.$fRandomBool3
                        w of ww2 { (#,#) ww3 ww4 ->
                 case ww3 of wild2 { GHC.Types.I# ds ->
                 case ds of ds1 {
                   DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } } }) -}
10b152e8c1df656ae149fa497ac2b353
  $warbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Prim.Int# -> [a]
  {- Arity: 3, Strictness: <L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w1
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww2
                            ww3
                            ww4
                            ww5 of ww8 { (#,#) ww9 ww10 ->
                     (ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww10 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 case System.Random.$wrandomIvalInteger
                        @ Test.QuickCheck.Random.QCGen
                        @ GHC.Types.Int
                        Test.QuickCheck.Random.$fRandomGenQCGen
                        GHC.Num.$fNumInt
                        Main.arbitraryList3
                        (GHC.Integer.Type.smallInteger ww)
                        (case ds1 of wild { (,) r1 r2 -> r1 }) of ww2 { (#,#) ww3 ww4 ->
                 case ww3 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 1# y) of wild {
                   GHC.Types.False
                   -> let {
                        lvl23 :: Test.QuickCheck.Gen.Gen a
                        = Test.QuickCheck.Arbitrary.arbitrary @ a w
                      } in
                      letrec {
                        go7 :: GHC.Prim.Int# -> [Test.QuickCheck.Gen.Gen a]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ (Test.QuickCheck.Gen.Gen a)
                            lvl23
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y) of wild2 {
                               GHC.Types.False -> go7 (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ (Test.QuickCheck.Gen.Gen a) })
                      } in
                      Main.arbitraryList2
                        @ a
                        (go7 1#)
                        (case ds1 of wild2 { (,) r1 r2 -> r2 })
                        (GHC.Types.I# ww)
                   GHC.Types.True
                   -> Main.arbitraryList2
                        @ a
                        (GHC.Types.[] @ (Test.QuickCheck.Gen.Gen a))
                        (case ds1 of wild2 { (,) r1 r2 -> r2 })
                        (GHC.Types.I# ww) } } }) -}
9e57f76befe88060c9f9e47f1cc77037
  $warbitrarySizedTree ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Types.Int
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (# a, [Main.Tree a] #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0] -}
266464c0e8c43266c1baebdca29bb2bc
  $wdice :: Test.QuickCheck.Random.QCGen -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ Test.QuickCheck.Random.QCGen
                        @ GHC.Types.Int
                        Test.QuickCheck.Random.$fRandomGenQCGen
                        GHC.Num.$fNumInt
                        Main.dice3
                        Main.dice2
                        w of ww2 { (#,#) ww3 ww4 ->
                 ww3 }) -}
666f854c7b6d8c2d58cffdb2e540f854
  $wedges :: [Main.Tree a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a (ww :: [Main.Tree a]) ->
                 case ww of wild {
                   [] -> 0#
                   : x xs
                   -> case GHC.List.$wlenAcc
                             @ (Main.Tree a)
                             wild
                             0# of ww2 { DEFAULT ->
                      case Main.$wpoly_cntChldrn @ a wild of ww1 { DEFAULT ->
                      GHC.Prim.+# ww2 ww1 } } }) -}
f3fa3fa646e504cc977835c25aa6f848
  $wpoly_cntChldn :: [Main.Tree a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
8258980b3358f6dfae185d2dc19537c7
  $wpoly_cntChldrn :: [Main.Tree a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
7dfba356c5176f55bea306128b6ed371
  $wprop_OneMoreNodeThanEdges ::
    [Main.Tree GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: [Main.Tree GHC.Types.Int]) ->
                 case Main.$wedges @ GHC.Types.Int ww of ww1 { DEFAULT ->
                 case ww of wild {
                   []
                   -> case GHC.Prim.+# ww1 1# of wild1 {
                        DEFAULT -> GHC.Types.False 1# -> GHC.Types.True }
                   : x xs
                   -> case Main.$wpoly_cntChldn
                             @ GHC.Types.Int
                             wild of ww2 { DEFAULT ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# (GHC.Prim.+# 1# ww2) (GHC.Prim.+# ww1 1#)) } } }) -}
4fe41344168b2a830b5f6573dc0137ca
  newtype BoolConj = BoolConj GHC.Types.Bool
eb65534da85e399c64537356dce35225
  type BoolConjAssoc =
    Main.BoolConj -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool
7a7b9092229e5c514413fdc5edba8736
  newtype BoolDisj = BoolDisj GHC.Types.Bool
a71cb63daab996bdfce6d632aec16795
  type BoolDisjAssoc =
    Main.BoolDisj -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool
3fc4baa17de8e2d42b7464f1139bf929
  newtype Combine a b = Combine {unCombine :: a -> b}
225e186231a1c391d772b05da1829061
  data Four a b c d = Four a b c d
78d861ffa9b9238f0fcc1831714c9d71
  type FourStrStrStrStrAssoc =
    Main.Four
      GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Four
         GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Four
         GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
dd9e7a2d5c1a662c36cb5fbc791c7375
  newtype Identity a = Identity a
c79a4c109da2b7ae02bda6861242a43d
  type IdentityStringAssoc =
    Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> GHC.Types.Bool
b4e43208111cf5029ca22d7052a31b87
  data Or a b = Fst a | Snd b
b88601c9aded15dff62d59b69155b153
  type OrAssocStrStr =
    Main.Or GHC.Base.String GHC.Base.String
    -> Main.Or GHC.Base.String GHC.Base.String
    -> Main.Or GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
381adeedbfedb0a12f57743ae522bde4
  data Three a b c = Three a b c
97924c376b43d7246eae507f876337f5
  type ThreeStrStrStrAssoc =
    Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
9e57f76befe88060c9f9e47f1cc77037
  data Tree a = Tree a [Main.Tree a]
    RecFlag: Recursive
d965e95d7f394330121599371a5e4fb4
  data Trivial = Trivial
aaaf029adc7708095255c3e83693713c
  type TrivialAssoc =
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
4e7291b182f3a4793d903e1c8224f75f
  data Two a b = Two a b
2e06b6a18260767271bc192869bb6556
  type TwoStringStringAssoc =
    Main.Two GHC.Base.String GHC.Base.String
    -> Main.Two GHC.Base.String GHC.Base.String
    -> Main.Two GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
994d92c7603d4731924a79481722f6ae
  aTree :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree @ GHC.Types.Int Main.aTree15 Main.aTree1) -}
c760616fa2ade2bdf36576a6efec38ad
  aTree1 :: [Main.Tree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Types.Int)
                   Main.aTree11
                   Main.aTree2) -}
a4bcf1c9e74e48c3e372d6d7b3c88948
  aTree10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
2e52fd91c4080cd33c63176c5444d58c
  aTree11 :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree @ GHC.Types.Int Main.aTree7 Main.aTree12) -}
b87d1c6b4289f8a8fc33fd02c13ab7ae
  aTree12 :: [Main.Tree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Types.Int)
                   Main.aTree13
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
455d5f27ba0b6387fa803d2834cd4b5c
  aTree13 :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree
                   @ GHC.Types.Int
                   Main.aTree14
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
42fd9399a2c8be1ac976a36707975164
  aTree14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -16#) -}
5a5036228ddf3b34cbc9a76ff0ac1e2e
  aTree15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
fab6b6fc247bb624cdd73aaf4c7fce5a
  aTree2 :: [Main.Tree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Types.Int)
                   Main.aTree9
                   Main.aTree3) -}
2457d468e6fc863b1d1f60fcf8511637
  aTree3 :: [Main.Tree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Types.Int)
                   Main.aTree4
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
4d29a5e4e5c6650967a953c857f78512
  aTree4 :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree @ GHC.Types.Int Main.aTree8 Main.aTree5) -}
274b73d10c1af45c8ae5decbbdef7d3f
  aTree5 :: [Main.Tree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Types.Int)
                   Main.aTree6
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
d01ff413424e1d0c8663754bd33746d3
  aTree6 :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree
                   @ GHC.Types.Int
                   Main.aTree7
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
ec276554963ec791d131e7e9b12b8455
  aTree7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
e45ba5d451ea86f50cfc426cba29d3d1
  aTree8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
97cff57ebbf19532f7c35a8d19c330e8
  aTree9 :: Main.Tree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Tree
                   @ GHC.Types.Int
                   Main.aTree10
                   (GHC.Types.[] @ (Main.Tree GHC.Types.Int))) -}
6b5932580c110b11e52e76428b1abcd1
  arbitraryBool :: Test.QuickCheck.Gen.Gen GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.arbitraryBool1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Bool>_R)) -}
15f13a26c24cd0b66816f896db3e993c
  arbitraryBool1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 Main.$warbitraryBool w) -}
0549353029a3f11465d384c67dc78e33
  arbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen [a]
  {- Arity: 3,
     Strictness: <L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.arbitraryList1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <[a]>_R)) -}
ff3d03283daee3b080185342305da470
  arbitraryList1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [a]
  {- Arity: 3,
     Strictness: <L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Main.$warbitraryList @ a w w1 ww1 }) -}
77919400febf8b1145fe6a057f6fbd2d
  arbitraryList2 ::
    [Test.QuickCheck.Gen.Gen a]
    -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U> -}
be85faf5f5024ce0e1ffd06af4c3edf2
  arbitraryList3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
4b2713237abc23a42bbab28f277fa4d4
  arbitrarySizedTree ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen (Main.Tree a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryTree2
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Tree a>_R)) -}
3c72765e5b6d42336f4ac0c9f24cdbf3
  dice :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.dice1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
154877f5b8c0523ab5bc6dfa8d61d975
  dice1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 Main.$wdice w) -}
fb2bfd05c53c3d704dfe0141b37dbd50
  dice2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
57252239b9c5680035ac575ea48a0060
  dice3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
b9019a984a36a5a14c441a8377c91b3d
  edges :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Main.Tree a) ->
                 case w of ww { Main.Tree ww1 ww2 ->
                 case Main.$wedges @ a ww2 of ww3 { DEFAULT ->
                 GHC.Types.I# ww3 } }) -}
daf26143df9a1e69292485056711a61c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
88cb39e4197d9c919e8ab99540c7ca69
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.TrivialAssoc
                        Main.main2
                          `cast`
                        (Trans
                             (<Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Trivial
                                        -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main_$ssemigroupAssoc
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
ae33da4912bb9bffc0e700247f3a17db
  main2 ::
    (Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Trivial
                         -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Trivial
                   @ (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.main3
                     `cast`
                   (Trans
                        (<Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   f
                   eta
                   eta1) -}
ab5caa63b3deee2580baf247c4c2807a
  main3 ::
    (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Trivial
                   @ (Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.main4
                     `cast`
                   (Trans
                        (<Main.Trivial -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Trivial -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   f
                   eta
                   eta1) -}
279f61656520a569b0c60a1bc47382a0
  main4 ::
    (Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.Trivial -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Trivial
                   @ GHC.Types.Bool
                   Main.$fShowTrivial
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   f
                   eta
                   eta1) -}
f831e584b6f7edd49f74c4f90c3e2eb8
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
df0a12e994819c26494ed8ee4dce5738
  main_$ssemigroupAssoc ::
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ (a :: Main.Trivial) (b :: Main.Trivial) (c :: Main.Trivial) ->
                 GHC.Types.True) -}
03ff03ab477b42c9819873d11b38d6d2
  nodes :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Tree a) ->
                 case ds of wild { Main.Tree p ds1 ->
                 case ds1 of wild1 {
                   [] -> Main.nodes2
                   : x xs
                   -> case Main.nodes1 @ a wild1 of wild2 { GHC.Types.I# y ->
                      GHC.Types.I# (GHC.Prim.+# 1# y) } } }) -}
233761a7cf4f1d661dd5e819f5655b37
  nodes1 :: [Main.Tree a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [Main.Tree a]) ->
                 case Main.$wpoly_cntChldn @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
5238f8fa58a25386df5ef796a119c820
  nodes2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
87fee2249f6d7a2d274c8952633e0b39
  prop_OneMoreNodeThanEdges ::
    Main.Tree GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Tree GHC.Types.Int) ->
                 case w of ww { Main.Tree ww1 ww2 ->
                 Main.$wprop_OneMoreNodeThanEdges ww2 }) -}
6555e0866b761cf10154c6002ee430ea
  prop_ReverseReverseId ::
    [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Integer.Type.Integer]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ GHC.Integer.Type.Integer
                   GHC.Integer.Type.$fEqInteger
                   (Main.reverse'
                      @ GHC.Integer.Type.Integer
                      (Main.reverse' @ GHC.Integer.Type.Integer xs))
                   xs) -}
98c00c2a40318f1258a994f29e829435
  qcBoolConj :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcBoolConj1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
0fe79405f85c247201505f74b5849d26
  qcBoolConj1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.BoolConjAssoc
                        Main.qcBoolConj2
                          `cast`
                        (Trans
                             (<Main.BoolConj
                               -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.BoolConj
                                        -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcBoolConj_$ssemigroupAssoc
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
b3e3b72479d9e6f40fb62bbb528cb6b1
  qcBoolConj2 ::
    (Main.BoolConj -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.BoolConj
                         -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolConj
                   @ (Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool)
                   Main.$fShowBoolConj
                   Main.qcBoolConj3
                     `cast`
                   (Trans
                        (<Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolConj[0])))
                   Main.$fArbitraryBoolConj_$cshrink
                   f
                   eta
                   eta1) -}
81579f54b03275d56efc617e34c45437
  qcBoolConj3 ::
    (Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolConj
                   @ (Main.BoolConj -> GHC.Types.Bool)
                   Main.$fShowBoolConj
                   Main.qcBoolConj4
                     `cast`
                   (Trans
                        (<Main.BoolConj -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.BoolConj -> GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolConj[0])))
                   Main.$fArbitraryBoolConj_$cshrink
                   f
                   eta
                   eta1) -}
64c15a11aa048fe21b5e3bbd44d51b7b
  qcBoolConj4 ::
    (Main.BoolConj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.BoolConj -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolConj
                   @ GHC.Types.Bool
                   Main.$fShowBoolConj
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolConj[0])))
                   Main.$fArbitraryBoolConj_$cshrink
                   f
                   eta
                   eta1) -}
561cbd86aa13d96faf8639080b15abc1
  qcBoolConj_$ssemigroupAssoc ::
    Main.BoolConj -> Main.BoolConj -> Main.BoolConj -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: Main.BoolConj)
                   (b :: Main.BoolConj)
                   (c :: Main.BoolConj) ->
                 case a `cast` (Main.N:BoolConj[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case b `cast` (Main.N:BoolConj[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case c of tpl { DEFAULT -> GHC.Types.True } } }) -}
485c9bd3c1564b01c1044c4cdfc3c029
  qcBoolDisj :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcBoolDisj1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e563ed96b8f4fc5d029dea1ceeeec3ba
  qcBoolDisj1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.BoolDisjAssoc
                        Main.qcBoolDisj2
                          `cast`
                        (Trans
                             (<Main.BoolDisj
                               -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.BoolDisj
                                        -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcBoolDisj_$ssemigroupAssoc
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
d84a7d3d473ba67e43e7bef224cb925c
  qcBoolDisj2 ::
    (Main.BoolDisj -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.BoolDisj
                         -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolDisj
                   @ (Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool)
                   Main.$fShowBoolDisj
                   Main.qcBoolDisj3
                     `cast`
                   (Trans
                        (<Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolDisj[0])))
                   Main.$fArbitraryBoolDisj_$cshrink
                   f
                   eta
                   eta1) -}
1bcfaac861081068ae63287b1ee97ff3
  qcBoolDisj3 ::
    (Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolDisj
                   @ (Main.BoolDisj -> GHC.Types.Bool)
                   Main.$fShowBoolDisj
                   Main.qcBoolDisj4
                     `cast`
                   (Trans
                        (<Main.BoolDisj -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.BoolDisj -> GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolDisj[0])))
                   Main.$fArbitraryBoolDisj_$cshrink
                   f
                   eta
                   eta1) -}
48e04cc51e57b25e065e55b5df0f8b4c
  qcBoolDisj4 ::
    (Main.BoolDisj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.BoolDisj -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.BoolDisj
                   @ GHC.Types.Bool
                   Main.$fShowBoolDisj
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:BoolDisj[0])))
                   Main.$fArbitraryBoolDisj_$cshrink
                   f
                   eta
                   eta1) -}
4a2b86ee53ef5557febbb3b2408def5f
  qcBoolDisj_$ssemigroupAssoc ::
    Main.BoolDisj -> Main.BoolDisj -> Main.BoolDisj -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: Main.BoolDisj)
                   (b :: Main.BoolDisj)
                   (c :: Main.BoolDisj) ->
                 case a `cast` (Main.N:BoolDisj[0]) of wild {
                   GHC.Types.False
                   -> case b `cast` (Main.N:BoolDisj[0]) of wild1 {
                        GHC.Types.False -> case c of tpl { DEFAULT -> GHC.Types.True }
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True }) -}
58d6ab7dadbee483ab9f00ba8c1c5cfd
  qcSemiFourStrStrStrStr :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcSemiFourStrStrStrStr1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
80a07b63de3b950c49dccc7f2563bb4f
  qcSemiFourStrStrStrStr1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.FourStrStrStrStrAssoc
                        Main.qcSemiFourStrStrStrStr3
                          `cast`
                        (Trans
                             (<Main.Four
                                 GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                               -> Main.Four
                                    GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                               -> Main.Four
                                    GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Four
                                          GHC.Base.String
                                          GHC.Base.String
                                          GHC.Base.String
                                          GHC.Base.String
                                        -> Main.Four
                                             GHC.Base.String
                                             GHC.Base.String
                                             GHC.Base.String
                                             GHC.Base.String
                                        -> Main.Four
                                             GHC.Base.String
                                             GHC.Base.String
                                             GHC.Base.String
                                             GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcSemiFourStrStrStrStr2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
c8c6e3878f4c5ed20d9086d027921b08
  qcSemiFourStrStrStrStr2 ::
    Main.Four
      GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Four
         GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Four
         GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (a :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
                   (b :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
                   (c :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String) ->
                 case a of wild { Main.Four a1 b1 c1 d ->
                 case b of wild1 { Main.Four a2 b2 c2 d1 ->
                 case c of wild2 { Main.Four a' b' c' d' ->
                 case GHC.Base.eqString
                        (GHC.Base.++
                           @ GHC.Types.Char
                           a1
                           (GHC.Base.++ @ GHC.Types.Char a2 a'))
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Base.++ @ GHC.Types.Char a1 a2)
                           a') of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString
                             (GHC.Base.++
                                @ GHC.Types.Char
                                b1
                                (GHC.Base.++ @ GHC.Types.Char b2 b'))
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (GHC.Base.++ @ GHC.Types.Char b1 b2)
                                b') of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     c1
                                     (GHC.Base.++ @ GHC.Types.Char c2 c'))
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Base.++ @ GHC.Types.Char c1 c2)
                                     c') of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Base.eqString
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     d
                                     (GHC.Base.++ @ GHC.Types.Char d1 d'))
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Base.++ @ GHC.Types.Char d d1)
                                     d') } } } } } }) -}
a3ce9afe74780335344e942d1438526c
  qcSemiFourStrStrStrStr3 ::
    (Main.Four
       GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Four
          GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Four
          GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Four
                              GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Four
                              GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Four
                        GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ (Main.Four
                        GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                      -> Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                      -> GHC.Types.Bool)
                   Main.qcSemiFourStrStrStrStr8
                   Main.qcSemiFourStrStrStrStr6
                     `cast`
                   (Trans
                        (<Main.Four
                            GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                          -> Main.Four
                               GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                          -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Four
                                     GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                                   -> Main.Four
                                        GHC.Base.String
                                        GHC.Base.String
                                        GHC.Base.String
                                        GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiFourStrStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Four
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]>_R))
                   Main.qcSemiFourStrStrStrStr4
                   f
                   eta
                   eta1) -}
900c9323ace69ccfe37c810e8d4b68f0
  qcSemiFourStrStrStrStr4 ::
    Main.Four
      [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> [Main.Four
          [GHC.Types.Char]
          [GHC.Types.Char]
          [GHC.Types.Char]
          [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds1 :: Main.Four
                             [GHC.Types.Char]
                             [GHC.Types.Char]
                             [GHC.Types.Char]
                             [GHC.Types.Char]) ->
                 GHC.Types.[]
                   @ (Main.Four
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char])) -}
d8c76ae438014e196b430c8fc611853f
  qcSemiFourStrStrStrStr5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Main.Four
         [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int)[OneShot] ->
                 case Main.$w$carbitrary
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        w
                        w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Main.Four
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
8ceb1424077a306073dd140887c94bef
  qcSemiFourStrStrStrStr6 ::
    (Main.Four
       GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Four
          GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Four
                              GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Four
                        GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ (Main.Four
                        GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                      -> GHC.Types.Bool)
                   Main.qcSemiFourStrStrStrStr8
                   Main.qcSemiFourStrStrStrStr7
                     `cast`
                   (Trans
                        (<Main.Four
                            GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                          -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Four
                                     GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiFourStrStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Four
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]>_R))
                   Main.qcSemiFourStrStrStrStr4
                   f
                   eta
                   eta1) -}
9d1c55a9050c563e57d44ddfdaa2748a
  qcSemiFourStrStrStrStr7 ::
    (Main.Four
       GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Four
                           GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Four
                        GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.qcSemiFourStrStrStrStr8
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.qcSemiFourStrStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Four
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]
                                [GHC.Types.Char]>_R))
                   Main.qcSemiFourStrStrStrStr4
                   f
                   eta
                   eta1) -}
0ac9fd0fb73fbb1c2f2a20fb732ebd0c
  qcSemiFourStrStrStrStr8 ::
    GHC.Show.Show
      (Main.Four
         GHC.Base.String GHC.Base.String GHC.Base.String GHC.Base.String)
  {- Unfolding: (Main.$fShowFour
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
5f526358b625a39402288ac562bb56ee
  qcSemiIdentityString :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcSemiIdentityString1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4b90ebacace08b636d777507fcfc2ddb
  qcSemiIdentityString1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.IdentityStringAssoc
                        Main.qcSemiIdentityString2
                          `cast`
                        (Trans
                             (<Main.Identity GHC.Base.String
                               -> Main.Identity GHC.Base.String
                               -> Main.Identity GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Identity GHC.Base.String
                                        -> Main.Identity GHC.Base.String
                                        -> Main.Identity GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcSemiIdentityString_$ssemigroupAssoc
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
6f7a9246c3fb1d72ab4aeeb24f0d7482
  qcSemiIdentityString2 ::
    (Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Identity GHC.Base.String)
                   @ (Main.Identity GHC.Base.String
                      -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiIdentityString7
                   Main.qcSemiIdentityString5
                     `cast`
                   (Trans
                        (<Main.Identity GHC.Base.String
                          -> Main.Identity GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Identity GHC.Base.String
                                   -> Main.Identity GHC.Base.String -> GHC.Types.Bool>_N)))
                   Main.qcSemiIdentityString4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Main.N:Identity[0] <[GHC.Types.Char]>_R)))
                   Main.qcSemiIdentityString3
                   f
                   eta
                   eta1) -}
6e38078d8421411f52a61e9a6e96ac8b
  qcSemiIdentityString3 ::
    Main.Identity [GHC.Types.Char] -> [Main.Identity [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds1 :: Main.Identity [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Identity [GHC.Types.Char])) -}
5e5d1313f8b9ff49d40cd8ce20ffc63c
  qcSemiIdentityString4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Test.QuickCheck.Random.QCGen) (eta1 :: GHC.Types.Int) ->
                 case eta1 of ww { GHC.Types.I# ww1 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R))
                   eta
                   ww1 }) -}
3b5c9c40eb98d40049083f3c7eed3473
  qcSemiIdentityString5 ::
    (Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Identity GHC.Base.String)
                   @ (Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiIdentityString7
                   Main.qcSemiIdentityString6
                     `cast`
                   (Trans
                        (<Main.Identity GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Identity GHC.Base.String -> GHC.Types.Bool>_N)))
                   Main.qcSemiIdentityString4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Main.N:Identity[0] <[GHC.Types.Char]>_R)))
                   Main.qcSemiIdentityString3
                   f
                   eta
                   eta1) -}
345701d9468d46a9d2566e057a41a300
  qcSemiIdentityString6 ::
    (Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Identity GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Identity GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.qcSemiIdentityString7
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.qcSemiIdentityString4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Main.N:Identity[0] <[GHC.Types.Char]>_R)))
                   Main.qcSemiIdentityString3
                   f
                   eta
                   eta1) -}
c1971dc9866f40beaf5317aefaa61e03
  qcSemiIdentityString7 ::
    GHC.Show.Show (Main.Identity GHC.Base.String)
  {- Unfolding: (Main.$fShowIdentity
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
59d95113281d77fa3a4a9172b4c653b0
  qcSemiIdentityString_$ssemigroupAssoc ::
    Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (a :: Main.Identity GHC.Base.String)
                   (b :: Main.Identity GHC.Base.String)
                   (c :: Main.Identity GHC.Base.String) ->
                 GHC.Base.eqString
                   (GHC.Base.++
                      @ GHC.Types.Char
                      a `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         b `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         c `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)))
                   (GHC.Base.++
                      @ GHC.Types.Char
                      a `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         b `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         c `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)))) -}
7ca163ab27538e3954c124fe499d68a5
  qcSemiOrStrStr :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcSemiOrStrStr1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cbc8eeff5eb27fdfc79d1b683efc1fcc
  qcSemiOrStrStr1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.OrAssocStrStr
                        Main.qcSemiOrStrStr3
                          `cast`
                        (Trans
                             (<Main.Or GHC.Base.String GHC.Base.String
                               -> Main.Or GHC.Base.String GHC.Base.String
                               -> Main.Or GHC.Base.String GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Or GHC.Base.String GHC.Base.String
                                        -> Main.Or GHC.Base.String GHC.Base.String
                                        -> Main.Or GHC.Base.String GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcSemiOrStrStr2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
cabe5c9aef6be2769e9cc88d41c6a15f
  qcSemiOrStrStr2 ::
    Main.Or GHC.Base.String GHC.Base.String
    -> Main.Or GHC.Base.String GHC.Base.String
    -> Main.Or GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (a :: Main.Or GHC.Base.String GHC.Base.String)
                   (b :: Main.Or GHC.Base.String GHC.Base.String)
                   (c :: Main.Or GHC.Base.String GHC.Base.String) ->
                 let {
                   $j :: [GHC.Types.Char] -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (a1 :: [GHC.Types.Char])[OneShot] ->
                     case a of wild {
                       Main.Fst ipv
                       -> case b of wild1 {
                            Main.Fst ipv1
                            -> case c of wild2 {
                                 Main.Fst ipv2 -> GHC.Types.False
                                 Main.Snd b1 -> GHC.Base.eqString a1 b1 }
                            Main.Snd x -> GHC.Base.eqString a1 x }
                       Main.Snd x -> GHC.Base.eqString a1 x }
                 } in
                 case a of wild {
                   Main.Fst ipv
                   -> case b of wild1 {
                        Main.Fst ipv1
                        -> case c of wild2 {
                             Main.Fst a1 -> GHC.Base.eqString a1 a1 Main.Snd a1 -> $j a1 }
                        Main.Snd x -> $j x }
                   Main.Snd x -> $j x }) -}
864e53d0a25056332b5ac4dfcafa54c2
  qcSemiOrStrStr3 ::
    (Main.Or GHC.Base.String GHC.Base.String
     -> Main.Or GHC.Base.String GHC.Base.String
     -> Main.Or GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Or GHC.Base.String GHC.Base.String
                         -> Main.Or GHC.Base.String GHC.Base.String
                         -> Main.Or GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Or GHC.Base.String GHC.Base.String)
                   @ (Main.Or GHC.Base.String GHC.Base.String
                      -> Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiOrStrStr8
                   Main.qcSemiOrStrStr6
                     `cast`
                   (Trans
                        (<Main.Or GHC.Base.String GHC.Base.String
                          -> Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Or GHC.Base.String GHC.Base.String
                                   -> Main.Or GHC.Base.String GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiOrStrStr5
                   Main.qcSemiOrStrStr4
                   f
                   eta
                   eta1) -}
544f2912bbf0d9bfc1bf5e5e4a4bae04
  qcSemiOrStrStr4 ::
    Main.Or [GHC.Types.Char] [GHC.Types.Char]
    -> [Main.Or [GHC.Types.Char] [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds1 :: Main.Or [GHC.Types.Char] [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Or [GHC.Types.Char] [GHC.Types.Char])) -}
d9fe0145f3f256206912b6e6c393e56f
  qcSemiOrStrStr5 ::
    Test.QuickCheck.Gen.Gen (Main.Or [GHC.Types.Char] [GHC.Types.Char])
  {- Unfolding: (Main.$fArbitraryOr_$carbitrary
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Main.$s$fArbitrary[]
                   Main.$s$fArbitrary[]) -}
962e805a5d83e895f16a142ea53ca33d
  qcSemiOrStrStr6 ::
    (Main.Or GHC.Base.String GHC.Base.String
     -> Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Or GHC.Base.String GHC.Base.String
                         -> Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Or GHC.Base.String GHC.Base.String)
                   @ (Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiOrStrStr8
                   Main.qcSemiOrStrStr7
                     `cast`
                   (Trans
                        (<Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_N)))
                   Main.qcSemiOrStrStr5
                   Main.qcSemiOrStrStr4
                   f
                   eta
                   eta1) -}
436fb89400a0a1ceb870ca3355f08510
  qcSemiOrStrStr7 ::
    (Main.Or GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Or GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Or GHC.Base.String GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.qcSemiOrStrStr8
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.qcSemiOrStrStr5
                   Main.qcSemiOrStrStr4
                   f
                   eta
                   eta1) -}
530c14c288497e1006aea5cc160cc95c
  qcSemiOrStrStr8 ::
    GHC.Show.Show (Main.Or GHC.Base.String GHC.Base.String)
  {- Unfolding: (Main.$fShowOr
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
c1b7f02839ea022a9f6117ad3ccd91c4
  qcSemiThreeStrStrStr :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcSemiThreeStrStrStr1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2675ba61a326dfccc49aa2c043f2fb37
  qcSemiThreeStrStrStr1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.ThreeStrStrStrAssoc
                        Main.qcSemiThreeStrStrStr3
                          `cast`
                        (Trans
                             (<Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                               -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                               -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                                        -> Main.Three
                                             GHC.Base.String GHC.Base.String GHC.Base.String
                                        -> Main.Three
                                             GHC.Base.String GHC.Base.String GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcSemiThreeStrStrStr2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
f6bddcc1a6840c3f5071d4bb85630dca
  qcSemiThreeStrStrStr2 ::
    Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (a :: Main.Three
                           GHC.Base.String GHC.Base.String GHC.Base.String)
                   (b :: Main.Three GHC.Base.String GHC.Base.String GHC.Base.String)
                   (c :: Main.Three
                           GHC.Base.String GHC.Base.String GHC.Base.String) ->
                 case a of wild { Main.Three a1 b1 c1 ->
                 case b of wild1 { Main.Three a2 b2 c2 ->
                 case c of wild2 { Main.Three a' b' c' ->
                 case GHC.Base.eqString
                        (GHC.Base.++
                           @ GHC.Types.Char
                           a1
                           (GHC.Base.++ @ GHC.Types.Char a2 a'))
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Base.++ @ GHC.Types.Char a1 a2)
                           a') of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString
                             (GHC.Base.++
                                @ GHC.Types.Char
                                b1
                                (GHC.Base.++ @ GHC.Types.Char b2 b'))
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (GHC.Base.++ @ GHC.Types.Char b1 b2)
                                b') of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Base.eqString
                             (GHC.Base.++
                                @ GHC.Types.Char
                                c1
                                (GHC.Base.++ @ GHC.Types.Char c2 c'))
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (GHC.Base.++ @ GHC.Types.Char c1 c2)
                                c') } } } } }) -}
dc4795be35b18aedb05c4389ec1dd5f5
  qcSemiThreeStrStrStr3 ::
    (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Three
                           GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                      -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                      -> GHC.Types.Bool)
                   Main.qcSemiThreeStrStrStr8
                   Main.qcSemiThreeStrStrStr6
                     `cast`
                   (Trans
                        (<Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                          -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                          -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                                   -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiThreeStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiThreeStrStrStr4
                   f
                   eta
                   eta1) -}
2067db987235024238f92b5011423369
  qcSemiThreeStrStrStr4 ::
    Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> [Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds1 :: Main.Three
                             [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]) ->
                 GHC.Types.[]
                   @ (Main.Three
                        [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char])) -}
81649b2d27baa6c80bd721ba77697335
  qcSemiThreeStrStrStr5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int)[OneShot] ->
                 case Main.$w$carbitrary1
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Main.Three
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   ww1
                   ww2
                   ww3 }) -}
8a5b18b7cb9e35e47692df7aff01e52d
  qcSemiThreeStrStrStr6 ::
    (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Three
                           GHC.Base.String GHC.Base.String GHC.Base.String
                         -> Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                      -> GHC.Types.Bool)
                   Main.qcSemiThreeStrStrStr8
                   Main.qcSemiThreeStrStrStr7
                     `cast`
                   (Trans
                        (<Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                          -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiThreeStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiThreeStrStrStr4
                   f
                   eta
                   eta1) -}
a1307f236385a93acc7c8153eb9d87f0
  qcSemiThreeStrStrStr7 ::
    (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Three
                           GHC.Base.String GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.qcSemiThreeStrStrStr8
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.qcSemiThreeStrStrStr5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiThreeStrStrStr4
                   f
                   eta
                   eta1) -}
0ae2a5888a46750523b8410154f6fae5
  qcSemiThreeStrStrStr8 ::
    GHC.Show.Show
      (Main.Three GHC.Base.String GHC.Base.String GHC.Base.String)
  {- Unfolding: (Main.$fShowThree
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
2ba38c9ea8f26278473a42b275a49b5b
  qcSemiTwoStringString :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.qcSemiTwoStringString1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e78bde7b68400c1cada86e100daf619e
  qcSemiTwoStringString1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.TwoStringStringAssoc
                        Main.qcSemiTwoStringString3
                          `cast`
                        (Trans
                             (<Main.Two GHC.Base.String GHC.Base.String
                               -> Main.Two GHC.Base.String GHC.Base.String
                               -> Main.Two GHC.Base.String GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Two GHC.Base.String GHC.Base.String
                                        -> Main.Two GHC.Base.String GHC.Base.String
                                        -> Main.Two GHC.Base.String GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.qcSemiTwoStringString2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
de6bdc107838dbff43fe1d153b36fbb8
  qcSemiTwoStringString2 ::
    Main.Two GHC.Base.String GHC.Base.String
    -> Main.Two GHC.Base.String GHC.Base.String
    -> Main.Two GHC.Base.String GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (a :: Main.Two GHC.Base.String GHC.Base.String)
                   (b :: Main.Two GHC.Base.String GHC.Base.String)
                   (c :: Main.Two GHC.Base.String GHC.Base.String) ->
                 case a of wild { Main.Two a1 b1 ->
                 case b of wild1 { Main.Two a2 b2 ->
                 case c of wild2 { Main.Two a' b' ->
                 case GHC.Base.eqString
                        (GHC.Base.++
                           @ GHC.Types.Char
                           a1
                           (GHC.Base.++ @ GHC.Types.Char a2 a'))
                        (GHC.Base.++
                           @ GHC.Types.Char
                           a1
                           (GHC.Base.++ @ GHC.Types.Char a2 a')) of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Base.eqString
                        (GHC.Base.++
                           @ GHC.Types.Char
                           b1
                           (GHC.Base.++ @ GHC.Types.Char b2 b'))
                        (GHC.Base.++
                           @ GHC.Types.Char
                           b1
                           (GHC.Base.++ @ GHC.Types.Char b2 b')) } } } }) -}
9e3468c2e434d7edee92b2d60b7a3add
  qcSemiTwoStringString3 ::
    (Main.Two GHC.Base.String GHC.Base.String
     -> Main.Two GHC.Base.String GHC.Base.String
     -> Main.Two GHC.Base.String GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Two GHC.Base.String GHC.Base.String
                         -> Main.Two GHC.Base.String GHC.Base.String
                         -> Main.Two GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Two GHC.Base.String GHC.Base.String)
                   @ (Main.Two GHC.Base.String GHC.Base.String
                      -> Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiTwoStringString8
                   Main.qcSemiTwoStringString6
                     `cast`
                   (Trans
                        (<Main.Two GHC.Base.String GHC.Base.String
                          -> Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Two GHC.Base.String GHC.Base.String
                                   -> Main.Two GHC.Base.String GHC.Base.String
                                   -> GHC.Types.Bool>_N)))
                   Main.qcSemiTwoStringString5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiTwoStringString4
                   f
                   eta
                   eta1) -}
ccc4e87c0b1b01b7e0292513a5076973
  qcSemiTwoStringString4 ::
    Main.Two [GHC.Types.Char] [GHC.Types.Char]
    -> [Main.Two [GHC.Types.Char] [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds1 :: Main.Two
                             [GHC.Types.Char] [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Two [GHC.Types.Char] [GHC.Types.Char])) -}
2921699bcb8b4e90b95506aa9b48cf74
  qcSemiTwoStringString5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.Two [GHC.Types.Char] [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int)[OneShot] ->
                 case Main.$w$carbitrary2
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        Main.$s$fArbitrary[]
                        Main.$s$fArbitrary[]
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 Main.Two @ [GHC.Types.Char] @ [GHC.Types.Char] ww1 ww2 }) -}
4e2b1ad7b91f6c230edb44f00697592c
  qcSemiTwoStringString6 ::
    (Main.Two GHC.Base.String GHC.Base.String
     -> Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Two GHC.Base.String GHC.Base.String
                         -> Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Two GHC.Base.String GHC.Base.String)
                   @ (Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
                   Main.qcSemiTwoStringString8
                   Main.qcSemiTwoStringString7
                     `cast`
                   (Trans
                        (<Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool>_N)))
                   Main.qcSemiTwoStringString5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiTwoStringString4
                   f
                   eta
                   eta1) -}
13ea929fc35708a9475c33b9f0861b5a
  qcSemiTwoStringString7 ::
    (Main.Two GHC.Base.String GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Two GHC.Base.String GHC.Base.String
                         -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (Main.Two GHC.Base.String GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.qcSemiTwoStringString8
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.qcSemiTwoStringString5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two [GHC.Types.Char] [GHC.Types.Char]>_R))
                   Main.qcSemiTwoStringString4
                   f
                   eta
                   eta1) -}
1e804f2b74a14a172aaee797ed4491c2
  qcSemiTwoStringString8 ::
    GHC.Show.Show (Main.Two GHC.Base.String GHC.Base.String)
  {- Unfolding: (Main.$fShowTwo
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
e3b00f77a50a7b4417315c7574b5d7a9
  reverse' :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f44ba632661824b9037f7f52bcb09c79
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
b42145e94fb28bd108eb1c0d57a5963e
  unCombine :: Main.Combine a b -> a -> b
  RecSel Left Main.Combine
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.unCombine1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Main.Combine a b>_R ->_R Main.N:Combine[0] <a>_N <b>_N) -}
1946bbc0ac52747b0ec10b4ea243c49b
  unCombine1 :: Main.Combine a b -> Main.Combine a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ b (ds :: Main.Combine a b) -> ds) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.BoolConj]
  = Main.$fArbitraryBoolConj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.BoolDisj]
  = Main.$fArbitraryBoolDisj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Four]
  = Main.$fArbitraryFour
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Identity]
  = Main.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Or]
  = Main.$fArbitraryOr
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Three]
  = Main.$fArbitraryThree
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Tree]
  = Main.$fArbitraryTree
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Trivial]
  = Main.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Two]
  = Main.$fArbitraryTwo
instance [safe] GHC.Classes.Eq [Main.BoolConj] = Main.$fEqBoolConj
instance [safe] GHC.Classes.Eq [Main.BoolDisj] = Main.$fEqBoolDisj
instance [safe] GHC.Classes.Eq [Main.Four] = Main.$fEqFour
instance [safe] GHC.Classes.Eq [Main.Identity] = Main.$fEqIdentity
instance [safe] GHC.Classes.Eq [Main.Or] = Main.$fEqOr
instance [safe] GHC.Classes.Eq [Main.Three] = Main.$fEqThree
instance [safe] GHC.Classes.Eq [Main.Trivial] = Main.$fEqTrivial
instance [safe] GHC.Classes.Eq [Main.Two] = Main.$fEqTwo
instance [safe] Data.Semigroup.Semigroup [Main.BoolConj]
  = Main.$fSemigroupBoolConj
instance [safe] Data.Semigroup.Semigroup [Main.BoolDisj]
  = Main.$fSemigroupBoolDisj
instance [safe] Data.Semigroup.Semigroup [Main.Four]
  = Main.$fSemigroupFour
instance [safe] Data.Semigroup.Semigroup [Main.Identity]
  = Main.$fSemigroupIdentity
instance [safe] Data.Semigroup.Semigroup [Main.Or]
  = Main.$fSemigroupOr
instance [safe] Data.Semigroup.Semigroup [Main.Three]
  = Main.$fSemigroupThree
instance [safe] Data.Semigroup.Semigroup [Main.Trivial]
  = Main.$fSemigroupTrivial
instance [safe] Data.Semigroup.Semigroup [Main.Two]
  = Main.$fSemigroupTwo
instance [safe] GHC.Show.Show [Main.BoolConj] = Main.$fShowBoolConj
instance [safe] GHC.Show.Show [Main.BoolDisj] = Main.$fShowBoolDisj
instance [safe] GHC.Show.Show [Main.Four] = Main.$fShowFour
instance [safe] GHC.Show.Show [Main.Identity] = Main.$fShowIdentity
instance [safe] GHC.Show.Show [Main.Or] = Main.$fShowOr
instance [safe] GHC.Show.Show [Main.Three] = Main.$fShowThree
instance [safe] GHC.Show.Show [Main.Tree] = Main.$fShowTree
instance [safe] GHC.Show.Show [Main.Trivial] = Main.$fShowTrivial
instance [safe] GHC.Show.Show [Main.Two] = Main.$fShowTwo
"SPEC semigroupAssoc @ (Identity String)" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                            (Main.Identity
                                                                               GHC.Base.String))
                                                          ($dEq :: GHC.Classes.Eq
                                                                     (Main.Identity
                                                                        GHC.Base.String))
  Main.semigroupAssoc @ (Main.Identity GHC.Base.String)
                      $dEq
                      $dSemigroup
  = Main.qcSemiIdentityString_$ssemigroupAssoc
"SPEC semigroupAssoc @ BoolConj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   Main.BoolConj)
                                                 ($dEq :: GHC.Classes.Eq Main.BoolConj)
  Main.semigroupAssoc @ Main.BoolConj $dEq $dSemigroup
  = Main.qcBoolConj_$ssemigroupAssoc
"SPEC semigroupAssoc @ BoolDisj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   Main.BoolDisj)
                                                 ($dEq :: GHC.Classes.Eq Main.BoolDisj)
  Main.semigroupAssoc @ Main.BoolDisj $dEq $dSemigroup
  = Main.qcBoolDisj_$ssemigroupAssoc
"SPEC semigroupAssoc @ Trivial" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                  Main.Trivial)
                                                ($dEq :: GHC.Classes.Eq Main.Trivial)
  Main.semigroupAssoc @ Main.Trivial $dEq $dSemigroup
  = Main.main_$ssemigroupAssoc
"SPEC/Main $fArbitrary[] @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char
                                          $dArbitrary
  = Main.$s$fArbitrary[]
"SPEC/Main $fArbitrary[]_$cshrink @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                            GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Char
                                                   $dArbitrary
  = Main.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

