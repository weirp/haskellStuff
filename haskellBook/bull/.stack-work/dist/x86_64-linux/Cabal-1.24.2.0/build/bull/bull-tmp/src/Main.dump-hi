
==================== FINAL INTERFACE ====================
2017-03-10 04:48:01.345696 UTC

interface main@main:Main 8002
  interface hash: 6cc729202e353a126ff6d6e0576a25e5
  ABI hash: a1612abfba9f896b2c6ae0376c6f346c
  export-list hash: dcf54be860686cdd47649b8030e3c821
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: be503ff9afc8da3f5d2d74e5e9ce53df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.monoidAssoc
  Main.monoidLeftIdentity
  Main.monoidRightIdentity
  Main.Bull{Main.Fools Main.Twoo}
  Main.BullMappend
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck 5d7cb5b36e5406469ab226c41cc67877
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Arbitrary 23d5e13e5df273f2d4aff38bd8911bef
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Gen fa9fa30ba543355933bd6081ce57f80f
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Test b10469d3ca677e9f6167afd5fc110985
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull :: Test.QuickCheck.Arbitrary.Arbitrary Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fArbitraryBull_$carbitrary
                  Main.$fArbitraryBull_$s$dmshrink -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull6
                   Main.$fArbitraryBull2) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull))) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Twoo) -}
2252c3e4fdb0590e69e059dcf7e391a4
  $fArbitraryBull5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Fools) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull_$carbitrary :: Test.QuickCheck.Gen.Gen Main.Bull
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ Main.Bull
                   Main.$fArbitraryBull1) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fArbitraryBull_$s$dmshrink :: Main.Bull -> [Main.Bull]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: Main.Bull) -> GHC.Types.[] @ Main.Bull) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fEqBull :: GHC.Classes.Eq Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull Main.$fEqBull_$c== Main.$fEqBull_$c/= -}
fd6605dd0a447d5cea6d97f0415617f6
  $fEqBull_$c/= :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Bull) (b :: Main.Bull) ->
                 case a of wild {
                   Main.Fools
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True }
                   Main.Twoo
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False } }) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fEqBull_$c== :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) ->
                 case ds of wild {
                   Main.Fools
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False }
                   Main.Twoo
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True } }) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fMonoidBull :: GHC.Base.Monoid Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.Fools
                  Main.$fMonoidBull_$cmappend
                  Main.$fMonoidBull_$cmconcat -}
fd6605dd0a447d5cea6d97f0415617f6
  $fMonoidBull_$cmappend :: Main.Bull -> Main.Bull -> Main.Bull
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) -> Main.Fools) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fMonoidBull_$cmconcat :: [Main.Bull] -> Main.Bull
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Main.Bull]) ->
                 case eta of wild { DEFAULT -> Main.Fools }) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fShowBull :: GHC.Show.Show Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fShowBull_$cshowsPrec
                  Main.$fShowBull_$cshow
                  Main.$fShowBull_$cshowList -}
fd6605dd0a447d5cea6d97f0415617f6
  $fShowBull1 :: Main.Bull -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
811bae448d1034de29bd53ebfc3861a1
  $fShowBull2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Twoo"#) -}
cc4cd724d35d3e829732239a603b3dbe
  $fShowBull3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fools"#) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fShowBull_$cshow :: Main.Bull -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bull) ->
                 case x of wild {
                   Main.Fools -> Main.$fShowBull3 Main.Twoo -> Main.$fShowBull2 }) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fShowBull_$cshowList :: [Main.Bull] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Bull Main.$fShowBull1) -}
fd6605dd0a447d5cea6d97f0415617f6
  $fShowBull_$cshowsPrec ::
    GHC.Types.Int -> Main.Bull -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Bull)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
6ecf17f6d1d1b69b0d6da4a80f1735da
  $tc'Fools :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14565306985209851106##
                   6455718131687022603##
                   Main.$trModule
                   Main.$tc'Fools1) -}
a5897e5dad86f82a6927abf8c15052dd
  $tc'Fools1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fools"#) -}
ece3996b77a8d4e37267a1e07fb36001
  $tc'Twoo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3854190919114193164##
                   11957892805415704562##
                   Main.$trModule
                   Main.$tc'Twoo1) -}
7bb8434c03ea1b490b56a4bdadbaec48
  $tc'Twoo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Twoo"#) -}
a7347b6b60adf91d3b22db8427b29384
  $tcBull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11498039343873913311##
                   9999654944972621690##
                   Main.$trModule
                   Main.$tcBull1) -}
0d68b6fd348a37f419a6778a4bae5bb1
  $tcBull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bull"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
fd6605dd0a447d5cea6d97f0415617f6
  data Bull = Fools | Twoo
735eea64d9d23efc024f4282587d6773
  type BullMappend =
    Main.Bull -> Main.Bull -> Main.Bull -> GHC.Types.Bool
f4c40ff448bb6598eed0f0fe90ef9916
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
387e1793591d5c2bb3a2f227bee3bab3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.BullMappend
                        Main.main3
                          `cast`
                        (Trans
                             (<Main.Bull -> Main.Bull -> Main.Bull -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Bull -> Main.Bull -> Main.Bull -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main_$smonoidAssoc
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.Bull -> GHC.Types.Bool)
                        Main.main2
                          `cast`
                        (Trans
                             (<Main.Bull -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Bull -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main_$smonoidLeftIdentity
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.Bull -> GHC.Types.Bool)
                        Main.main2
                          `cast`
                        (Trans
                             (<Main.Bull -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <Main.Bull -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main_$smonoidLeftIdentity
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
1e481d01694670dc5db5fbcf7122d566
  main2 ::
    (Main.Bull -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.Bull -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Bull
                   @ GHC.Types.Bool
                   Main.$fShowBull
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryBull_$carbitrary
                   Main.$fArbitraryBull_$s$dmshrink
                   f
                   eta
                   eta1) -}
5165266da76002009fe039292e3512d1
  main3 ::
    (Main.Bull -> Main.Bull -> Main.Bull -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: Main.Bull
                         -> Main.Bull -> Main.Bull -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Bull
                   @ (Main.Bull -> Main.Bull -> GHC.Types.Bool)
                   Main.$fShowBull
                   Main.main4
                     `cast`
                   (Trans
                        (<Main.Bull -> Main.Bull -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Bull -> Main.Bull -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryBull_$carbitrary
                   (\ (ds1 :: Main.Bull) -> GHC.Types.[] @ Main.Bull)
                   f
                   eta
                   eta1) -}
ea06afac9fdf7be5f49bb5cf98b9e5f6
  main4 ::
    (Main.Bull -> Main.Bull -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Main.Bull -> Main.Bull -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Main.Bull
                   @ (Main.Bull -> GHC.Types.Bool)
                   Main.$fShowBull
                   Main.main2
                     `cast`
                   (Trans
                        (<Main.Bull -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Main.Bull -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryBull_$carbitrary
                   Main.$fArbitraryBull_$s$dmshrink
                   f
                   eta
                   eta1) -}
19bd0a82beaec0bf0b931d47fc593af0
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e1b63c4080795c42597d05f1cfa63344
  main_$smonoidAssoc ::
    Main.Bull -> Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ (x :: Main.Bull) (y :: Main.Bull) (z :: Main.Bull) ->
                 GHC.Types.True) -}
4eb8d3ac1188c5809a5d1d8dc3be0323
  main_$smonoidLeftIdentity :: Main.Bull -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bull) ->
                 case x of wild {
                   Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False }) -}
bc3907d327590e7670ce5c8ecfd72749
  monoidAssoc ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (x :: m)
                   (y :: m)
                   (z :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      x
                      (GHC.Base.mappend @ m $dMonoid y z))
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      (GHC.Base.mappend @ m $dMonoid x y)
                      z)) -}
b94f1625975968880c2ab0df0e8ccc6e
  monoidLeftIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (x :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid (GHC.Base.mempty @ m $dMonoid) x)
                   x) -}
cc0925386462f3336e8ab2846e4639be
  monoidRightIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (x :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid x (GHC.Base.mempty @ m $dMonoid))
                   x) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Bull]
  = Main.$fArbitraryBull
instance [safe] GHC.Classes.Eq [Main.Bull] = Main.$fEqBull
instance [safe] GHC.Base.Monoid [Main.Bull] = Main.$fMonoidBull
instance [safe] GHC.Show.Show [Main.Bull] = Main.$fShowBull
"SPEC monoidAssoc @ Bull" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                         Main.Bull)
                                          ($dEq :: GHC.Classes.Eq Main.Bull)
  Main.monoidAssoc @ Main.Bull $dEq $dMonoid
  = Main.main_$smonoidAssoc
"SPEC monoidLeftIdentity @ Bull" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                Main.Bull)
                                                 ($dEq :: GHC.Classes.Eq Main.Bull)
  Main.monoidLeftIdentity @ Main.Bull $dEq $dMonoid
  = Main.main_$smonoidLeftIdentity
"SPEC monoidRightIdentity @ Bull" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                 Main.Bull)
                                                  ($dEq :: GHC.Classes.Eq Main.Bull)
  Main.monoidRightIdentity @ Main.Bull $dEq $dMonoid
  = Main.main_$smonoidLeftIdentity
"SPEC/Main $dmshrink @ Bull" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               Main.Bull)
  Test.QuickCheck.Arbitrary.$dmshrink @ Main.Bull $dArbitrary
  = Main.$fArbitraryBull_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

